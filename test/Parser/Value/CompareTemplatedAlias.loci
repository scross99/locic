// RUN: %locic %s --emit-llvm -o %t


class TestClass() {
	static create = default;
	
	TestClass left_shift(unused const TestClass& operand) const {
		return @();
	}
	
	TestClass right_shift(unused const TestClass& operand) const {
		return @();
	}
	
	bool less_than(unused const TestClass& operand) const {
		return false;
	}
	
	bool greater_than(unused const TestClass& operand) const {
		return false;
	}
}

template <typename A>
using Alias1 = TestClass();

template <typename A, typename B>
using Alias2 = TestClass();

import void f(bool arg);
import void g(TestClass arg);

export void compareTemplatedAlias() {
	auto z = TestClass();
	
	f(Alias1 < TestClass > < z);
	f(Alias1 < TestClass > > z);
	f(z < Alias1 < TestClass >);
	f(z > Alias1 < TestClass >);
	
	f(Alias2 < TestClass, TestClass > < z);
	f(Alias2 < TestClass, TestClass > > z);
	f(z < Alias2 < TestClass, TestClass >);
	f(z > Alias2 < TestClass, TestClass >);
	
	g(Alias1 < TestClass > << z);
	g(Alias1 < TestClass > >> z);
	g(z << Alias1 < TestClass >);
	g(z >> Alias1 < TestClass >);
	
	g(Alias2 < TestClass, TestClass > << z);
	g(Alias2 < TestClass, TestClass > >> z);
	g(z << Alias2 < TestClass, TestClass >);
	g(z >> Alias2 < TestClass, TestClass >);
}
