// RUN: %locic %s --parse-only


export int testBooleanAndOperatorSequence(int value) {
	// Check all possibilities!
	value = value == value and value == value;
	value = value == value and value != value;
	value = value == value and value < value;
	value = value == value and value <= value;
	value = value == value and value > value;
	value = value == value and value >= value;
	
	value = value != value and value == value;
	value = value != value and value != value;
	value = value != value and value < value;
	value = value != value and value <= value;
	value = value != value and value > value;
	value = value != value and value >= value;
	
	value = value < value and value == value;
	value = value < value and value != value;
	value = value < value and value < value;
	value = value < value and value <= value;
	value = value < value and value > value;
	value = value < value and value >= value;
	
	value = value <= value and value == value;
	value = value <= value and value != value;
	value = value <= value and value < value;
	value = value <= value and value <= value;
	value = value <= value and value > value;
	value = value <= value and value >= value;
	
	value = value > value and value == value;
	value = value > value and value != value;
	value = value > value and value < value;
	value = value > value and value <= value;
	value = value > value and value > value;
	value = value > value and value >= value;
	
	value = value >= value and value == value;
	value = value >= value and value != value;
	value = value >= value and value < value;
	value = value >= value and value <= value;
	value = value >= value and value > value;
	value = value >= value and value >= value;
	
	return value;
}

export int testBooleanOrOperatorSequence(int value) {
	// Check all possibilities!
	value = value == value or value == value;
	value = value == value or value != value;
	value = value == value or value < value;
	value = value == value or value <= value;
	value = value == value or value > value;
	value = value == value or value >= value;
	
	value = value != value or value == value;
	value = value != value or value != value;
	value = value != value or value < value;
	value = value != value or value <= value;
	value = value != value or value > value;
	value = value != value or value >= value;
	
	value = value < value or value == value;
	value = value < value or value != value;
	value = value < value or value < value;
	value = value < value or value <= value;
	value = value < value or value > value;
	value = value < value or value >= value;
	
	value = value <= value or value == value;
	value = value <= value or value != value;
	value = value <= value or value < value;
	value = value <= value or value <= value;
	value = value <= value or value > value;
	value = value <= value or value >= value;
	
	value = value > value or value == value;
	value = value > value or value != value;
	value = value > value or value < value;
	value = value > value or value <= value;
	value = value > value or value > value;
	value = value > value or value >= value;
	
	value = value >= value or value == value;
	value = value >= value or value != value;
	value = value >= value or value < value;
	value = value >= value or value <= value;
	value = value >= value or value > value;
	value = value >= value or value >= value;
	
	return value;
}

export int testBooleanShortCircuitAndOperatorSequence(int value) {
	// Check all possibilities!
	value = value == value && value == value;
	value = value == value && value != value;
	value = value == value && value < value;
	value = value == value && value <= value;
	value = value == value && value > value;
	value = value == value && value >= value;
	
	value = value != value && value == value;
	value = value != value && value != value;
	value = value != value && value < value;
	value = value != value && value <= value;
	value = value != value && value > value;
	value = value != value && value >= value;
	
	value = value < value && value == value;
	value = value < value && value != value;
	value = value < value && value < value;
	value = value < value && value <= value;
	value = value < value && value > value;
	value = value < value && value >= value;
	
	value = value <= value && value == value;
	value = value <= value && value != value;
	value = value <= value && value < value;
	value = value <= value && value <= value;
	value = value <= value && value > value;
	value = value <= value && value >= value;
	
	value = value > value && value == value;
	value = value > value && value != value;
	value = value > value && value < value;
	value = value > value && value <= value;
	value = value > value && value > value;
	value = value > value && value >= value;
	
	value = value >= value && value == value;
	value = value >= value && value != value;
	value = value >= value && value < value;
	value = value >= value && value <= value;
	value = value >= value && value > value;
	value = value >= value && value >= value;
	
	return value;
}

export int testBooleanShortCircuitOrOperatorSequence(int value) {
	// Check all possibilities!
	value = value == value || value == value;
	value = value == value || value != value;
	value = value == value || value < value;
	value = value == value || value <= value;
	value = value == value || value > value;
	value = value == value || value >= value;
	
	value = value != value || value == value;
	value = value != value || value != value;
	value = value != value || value < value;
	value = value != value || value <= value;
	value = value != value || value > value;
	value = value != value || value >= value;
	
	value = value < value || value == value;
	value = value < value || value != value;
	value = value < value || value < value;
	value = value < value || value <= value;
	value = value < value || value > value;
	value = value < value || value >= value;
	
	value = value <= value || value == value;
	value = value <= value || value != value;
	value = value <= value || value < value;
	value = value <= value || value <= value;
	value = value <= value || value > value;
	value = value <= value || value >= value;
	
	value = value > value || value == value;
	value = value > value || value != value;
	value = value > value || value < value;
	value = value > value || value <= value;
	value = value > value || value > value;
	value = value > value || value >= value;
	
	value = value >= value || value == value;
	value = value >= value || value != value;
	value = value >= value || value < value;
	value = value >= value || value <= value;
	value = value >= value || value > value;
	value = value >= value || value >= value;
	
	return value;
}
