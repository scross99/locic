// RUN: %locic %s std.memory:0.1.0 --interpret > %t
// RUN: FileCheck < %t %s

// CHECK: Create TestClass: 10
// CHECK: Create owner0.
// CHECK: Create owner1.
// CHECK: Copy owner0 as owner2.
// CHECK: Destroy owner2.
// CHECK: Destroy owner0.
// CHECK: Destroy owner1.
// CHECK: Destroy TestClass: 10
// CHECK: All pointers destroyed...

// Test output.
import void printf(const ubyte * str, ...) noexcept;

class TestClass(int value) {
	static create(int value) {
		printf(C"Create TestClass: %d\n", value);
		return @(value);
	}
	
	~ {
		printf(C"Destroy TestClass: %d\n", @value);
	}
}

class OwnerClass(int id, std::shared_ptr<const TestClass> ptr) {
	static create(int id, std::shared_ptr<TestClass> ptr) {
		printf(C"Create owner%d.\n", id);
		return @(id, move ptr);
	}
	
	~ {
		printf(C"Destroy owner%d.\n", @id);
	}
	
	OwnerClass implicitCopy() const {
		int newId = 2;
		printf(C"Copy owner%d as owner%d.\n", @id, newId);
		return @(newId, @ptr);
	}
}

// Entry point.
export int main(unused int argc, unused ubyte ** argv) {
	auto sharedPtr = std::new_shared<TestClass>(TestClass(10));
	
	auto owner0 = OwnerClass(0, sharedPtr);
	auto owner1 = OwnerClass(1, sharedPtr);
	
	{
		unused auto owner2 = owner0;
	}
	
	unused_result move sharedPtr;
	unused_result move owner0;
	unused_result move owner1;
	
	printf(C"All pointers destroyed...\n");
	
	return 0;
}

