// RUN: %locic %s --verify > %t
// RUN: FileCheck < %t %s

interface Requirements {
	void methodA(int i);
}

template <typename T>
class TestClass() {
	void methodA(unused float f) require(T : Requirements) { }
}

// The intention here is to confuse the compiler into
// assuming T has method 'methodA', even though the
// predicate 'TestClass<T> : Requirements' is actually
// always false and hence no information can be obtained
// from it about what methods T supports.
template <typename T>
void function(T& object) require(TestClass<T> : Requirements) {
	// CHECK: .loci:22:2: error: template arguments do not satisfy require predicate 'TestClass<T> : Requirements' of method 'methodA'
	// CHECK: .loci:22:2: note: because: cannot cast type 'int_t' to 'float_t' for parameter 0 in method 'methoda'
	object.methodA(0);
}

// CHECK: 1 error generated.
