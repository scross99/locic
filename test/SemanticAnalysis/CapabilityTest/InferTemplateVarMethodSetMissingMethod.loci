// RUN: %locic %s --verify > %t
// RUN: FileCheck < %t %s

interface Requirements {
	void methodA();
	
	void methodB();
}

template <typename T>
class TestClass() {
	void methodA() require(T : Requirements) { }
}

// The intention here is to confuse the compiler into
// assuming T has method 'methodA', even though the
// predicate 'TestClass<T> : Requirements' is actually
// always false and hence no information can be obtained
// from it about what methods T supports.
template <typename T>
void function(T& object) require(TestClass<T> : Requirements) {
	// CHECK: Can't access member 'methodA' in type 'TemplateVarType(
	// CHECK-NEXT:     templateVar: TemplateVar(
	// CHECK-NEXT:         name = ::function::T,
	// CHECK-NEXT:         index = 0
	// CHECK-NEXT:     )
	// CHECK-NEXT: )'
	// CHECK: line 32
	// CHECK-NEXT: column 2
	// CHECK: line 32
	// CHECK-NEXT: column 16
	object.methodA();
}
