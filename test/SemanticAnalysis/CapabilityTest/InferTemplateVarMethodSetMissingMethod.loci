// RUN: %locic %s --verify > %t
// RUN: FileCheck < %t %s

interface Requirements {
	void methodA();
	
	void methodB();
}

template <typename T>
class TestClass() {
	void methodA() require(T : Requirements) { }
}

// The intention here is to confuse the compiler into
// assuming T has method 'methodA', even though the
// predicate 'TestClass<T> : Requirements' is actually
// always false and hence no information can be obtained
// from it about what methods T supports.
template <typename T>
void function(T& object) require(TestClass<T> : Requirements) {
	// CHECK: .loci:23:2: error: cannot find member 'methodA' in type 'T'
	object.methodA();
}

// CHECK: 1 error generated.
