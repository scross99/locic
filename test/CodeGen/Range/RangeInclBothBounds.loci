// RUN: %locic %s --target x86_64 --emit-llvm -o %t
// RUN: FileCheck < %t %s

// CHECK-LABEL: declare void @g(i32)
import void g(int i);

// CHECK-LABEL: define void @f
export void f() {
	// CHECK: %[[RANGEVAR:[0-9]+]] = alloca { i32, i32 }
	// CHECK: %[[XVAR:[0-9]+]] = alloca i32
	
	// CHECK:      %[[RANGESTART_INIT:[0-9]+]] = getelementptr inbounds {{.*}}%[[RANGEVAR]], i32 0, i32 0
	// CHECK-NEXT: store i32 -1, {{.*}}%[[RANGESTART_INIT]]
	// CHECK-NEXT: %[[RANGEEND_INIT:[0-9]+]] = getelementptr inbounds {{.*}}%[[RANGEVAR]], i32 0, i32 1
	// CHECK-NEXT: store i32 2, {{.*}}%[[RANGEEND_INIT]]
	// CHECK: br label %loopCondition
	for (auto x: range_incl<int>(-1, 2)) {
		// CHECK-LABEL: loopCondition:
		// CHECK-NEXT: %[[RANGESTART_COND:[0-9]+]] = getelementptr inbounds {{.*}}%[[RANGEVAR]], i32 0, i32 0
		// CHECK-NEXT: %[[RANGEEND_COND:[0-9]+]] = getelementptr inbounds {{.*}}%[[RANGEVAR]], i32 0, i32 1
		// CHECK-NEXT: %[[RANGEEND_COND_VALUE:[0-9]+]] = load{{.*}}%[[RANGEEND_COND]]
		// CHECK-NEXT: %[[RANGESTART_COND_VALUE:[0-9]+]] = load{{.*}}%[[RANGESTART_COND]]
		
		// CHECK-NEXT: %[[IS_NOT_EMPTY:[0-9]+]] = icmp slt i32 %[[RANGEEND_COND_VALUE]], %[[RANGESTART_COND_VALUE]]
		// CHECK-NEXT: %[[IS_NOT_EMPTY_U8:[0-9]+]] = zext i1 %[[IS_NOT_EMPTY]] to i8
		
		// CHECK-NEXT: %[[V0:[0-9]+]] = icmp ne i8 %[[IS_NOT_EMPTY_U8]], 0
		// CHECK-NEXT: %[[V1:[0-9]+]] = xor i1 %[[V0]], true
		// CHECK-NEXT: %[[V2:[0-9]+]] = zext i1 %[[V1]] to i8
		
		// CHECK-NEXT: %[[IS_NOT_EMPTY_RESULT:[0-9]+]] = icmp ne i8 %[[V2]], 0
		// CHECK-NEXT: br i1 %[[IS_NOT_EMPTY_RESULT]], label %loopIteration, label %loopEnd
		
		// CHECK-LABEL: loopIteration:
		// CHECK-NEXT: %[[RANGESTART_ITER:[0-9]+]] = getelementptr inbounds {{.*}}%[[RANGEVAR]], i32 0, i32 0
		// CHECK-NEXT: %[[RANGESTART_ITER_VALUE:[0-9]+]] = load{{.*}}%[[RANGESTART_ITER]]
		// CHECK: store {{.*}}[[RANGESTART_ITER_VALUE]], {{.*}}%[[XVAR]]
		// CHECK: %[[XVARVALUE:[0-9]+]] = load {{.*}}%[[XVAR]]
		// CHECK-NEXT: call void @g(i32 %[[XVARVALUE]])
		// CHECK-NEXT: br label %loopAdvance
		g(x);
		
		// CHECK-LABEL: loopAdvance:
		// CHECK-NEXT: %[[RANGESTART_ADVANCE:[0-9]+]] = getelementptr inbounds {{.*}}%[[RANGEVAR]], i32 0, i32 0
		// CHECK-NEXT: %[[RANGESTART_ADVANCE_VALUE:[0-9]+]] = load{{.*}}%[[RANGESTART_ADVANCE]]
		// CHECK-NEXT: %[[NEXT_VALUE:[0-9]+]] = add nsw i32 %[[RANGESTART_ADVANCE_VALUE]], 1
		// CHECK-NEXT: store {{.*}}%[[NEXT_VALUE]], {{.*}}%[[RANGESTART_ADVANCE]]
		// CHECK-NEXT: br label %loopCondition
	}
	// CHECK: ret void
}
