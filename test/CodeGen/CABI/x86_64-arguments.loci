// These ABI checks are copied from Clang's test/CodeGen/x86_64-arguments.c.
//
// RUN: %locic %s --target x86_64-unknown-unknown --emit-llvm -o %t
// RUN: FileCheck < %t %s

// CHECK-LABEL: define signext i8 @f0()
export byte f0() {
	return 0;
}

// CHECK-LABEL: define signext i16 @f1()
export short f1() {
	return 0;
}

// CHECK-LABEL: define i32 @f2()
export int f2() {
	return 0;
}

// CHECK-LABEL: define float @f3()
export float f3() {
	return 0.0f;
}

// CHECK-LABEL: define double @f4()
export double f4() {
	return 0.0;
}

// CHECK-LABEL: define x86_fp80 @f5()
export long double f5() {
	return 0.0;
}

// CHECK-LABEL: define void @f6(i8 signext, i16 signext, i32, i64, i8*)
export void f6(unused byte a0, unused short a1, unused int a2,
               unused long long a3, unused void *a4) { }

// CHECK-LABEL: define void @f7(i32 %coerce)
enum e7 {A, B, C};
export void f7(unused e7 a0) { }

// Test merging/passing of upper eightbyte with X87 class.
//
// CHECK-LABEL: define void @f8_1(%T1N2u8* noalias sret %agg.result)
// CHECK-LABEL: define void @f8_2(%T1N2u8* byval align 16)
union u8 {
  long double a;
  int b;
};
export u8 f8_1() { while (true) {}; return u8(); }
export void f8_2(unused u8 a0) {}

// FIXME-CHECK-LABEL: define i64 @f9()
// struct s9 { int a; int b; int : 0; } f9(void) { while (1) {} }

// FIXME-CHECK-LABEL: define void @f10(i64 %a0.coerce)
// struct s10 { int a; int b; int : 0; };
// void f10(struct s10 a0) {}

// CHECK-LABEL: define void @f11(%T1N3u11* noalias sret %agg.result)
union u11 { long double a; float b; }
export u11 f11() { while (true) {}; return u11(); }

// FIXME-CHECK-LABEL: define i32 @f12_0()
// FIXME-CHECK-LABEL: define void @f12_1(i32 %a0.coerce)
// struct s12 { int a __attribute__((aligned(16))); };
// struct s12 f12_0(void) { while (1) {} }
// void f12_1(struct s12 a0) {}

// Check that sret parameter is accounted for when checking available integer
// registers.
// CHECK-LABEL: define void @f13(%T1N5s13_0* noalias sret %agg.result, i32, i32, i32, i32, %T1N5s13_1* byval align 8, i32)

struct s13_0 { long long[3u] f0; };
struct s13_1 { long long[2u] f0; };
import s13_0 magic13();
export s13_0 f13(unused int a, unused int b, unused int c, unused int d,
                 unused s13_1 e, unused int f) {
	while (true) {}; return magic13();
}

// CHECK: define void @f14({{.*}}, i8 signext)
export void f14(unused int a, unused int b, unused int c, unused int d,
                unused int e, unused int f, unused byte X) {}

// CHECK: define void @f15({{.*}}, i8*)
export void f15(unused int a, unused int b, unused int c, unused int d,
                unused int e, unused int f, unused void *X) {}

// CHECK: define void @f16({{.*}}, float)
export void f16(unused float a, unused float b, unused float c, unused float d,
                unused float e, unused float f, unused float g, unused float h,
                unused float X) {}

// CHECK: define void @f17({{.*}}, x86_fp80)
export void f17(unused float a, unused float b, unused float c, unused float d,
                unused float e, unused float f, unused float g, unused float h,
                unused long double X) {}

// Check for valid coercion.  The struct should be passed/returned as i32, not
// as i64 for better code quality.
// CHECK-LABEL: define void @f18(i32, i32 %coerce) 
struct f18_s0 { int f0; };
export void f18(unused int a, unused f18_s0 f18_arg1) { }

// Check byval alignment.

// CHECK-LABEL: define void @f19(%T1N3s19* byval align 16)
struct s19 {
  long double a;
};
export void f19(unused s19 x) {}

// FIXME-CHECK-LABEL: define void @f20(%struct.s20* byval align 32)
// struct __attribute__((aligned(32))) s20 {
//   int x;
//   int y;
// };
// void f20(struct s20 x) {}

struct StringRef {
  long x;
  const byte *Ptr;
};

// CHECK-LABEL: define i8* @f21(i64 %coerce0, i8* %coerce1) 
export const byte *f21(unused StringRef S) { return null; }

// PR7567
// typedef __attribute__ ((aligned(16))) struct f22s { unsigned long long x[2]; } L;
// export void f22(L x, L y) { }
// FIXME-CHECK: @f22
// FIXME-CHECK: %x = alloca{{.*}}, align 16
// FIXME-CHECK: %y = alloca{{.*}}, align 16

// PR7714
struct f23S {
  short f0;
  unsigned f1;
  int f2;
};

// CHECK-LABEL: define void @f23(i32, i64 %coerce0, i32 %coerce1)
export void f23(unused int A, unused f23S B) { }

struct f24s { long a; int b; };

// CHECK-LABEL: define { i64, i32 } @f24(i8*, i8*)
export f23S f24(f23S *X, unused f24s *P2) { return *X; }

struct foo26 {
  int *X;
  float *Y;
};

// CHECK: define %T1N5foo26 @f26(i8*)
export foo26 f26(foo26 *P) { return *P; }

// rdar://5711709
struct f28c {
  double x;
  int y;
};

// CHECK-LABEL: define void @f28(double %coerce0, i32 %coerce1)
export void f28(unused f28c C) { }

struct f29c {
	double x;
	int y;
};

struct f29b {
	f29c[1] x;
};

// CHECK-LABEL: define void @f29a(double %coerce0, i32 %coerce1)
export void f29a(unused f29b A) { }

// rdar://8249586
struct S0 { byte[8] f0; byte f2; byte f3; byte f4; };

// CHECK-LABEL: define void @f30(i64 %coerce0, i24 %coerce1)
export void f30(unused S0 p_4) { }

// Pass the third element as a float when followed by tail padding.
// rdar://8251384
struct f31foo { float a; float b; float c; };
// CHECK-LABEL: define float @f31(<2 x float> %coerce0, float %coerce1)
export float f31(f31foo X) { return X.c; }

// rdar://9122143
union str_union {
	long double a;
	long c;
};

struct str {
	str_union value;
};

// CHECK: declare void @f35(%T1N3str* byval align 16)
import void f35(str s);
