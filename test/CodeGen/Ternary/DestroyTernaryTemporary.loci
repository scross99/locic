// RUN: %locic %s --target x86_64 --emit-llvm -o %t
// RUN: FileCheck < %t %s
// XFAIL: *

import {
	
	class TestClass {
		static TestClass create() noexcept;
	}
	
	// CHECK-LABEL: declare {{.*}} @g
	int g(const TestClass& value) noexcept;
	
}

// CHECK-LABEL: define void @h
export void h() {
	// CHECK: %[[V1:[0-9]+]] = alloca i8, i64 %sizeof__TestClass
	// CHECK: %[[V2:[0-9]+]] = alloca i8, i64 %sizeof__TestClass
	// CHECK: %[[V3:[0-9]+]] = alloca i8, i64 %sizeof__TestClass
	// CHECK: %[[V4:[0-9]+]] = alloca i8, i64 %sizeof__TestClass
	
	// TODO: Need to call __setempty() method otherwise one of the
	//       destructor calls will be invalid!
	// CHECK: ...call __setempty() method...
	
	// CHECK: br i1 %{{[0-9]+}}, label %[[TRUE:[0-9]+]], label %[[FALSE:[0-9]+]]
	// CHECK: <label>:[[TRUE]]
	// CHECK-NEXT: call void @MT1N9TestClassF1N6create(i8* %[[V1]])
	// CHECK-NEXT: call void @MT1N9TestClassF1N8__moveto(i8* %[[V1]], i8* %[[V2]], i64 0)
	// CHECK-NEXT: call i32 @g(i8* %[[V2]])
	// CHECK-NEXT: br label %[[MERGE:[0-9]+]]
	// CHECK: <label>:[[FALSE]]
	// CHECK-NEXT: call void @MT1N9TestClassF1N6create(i8* %[[V3]])
	// CHECK-NEXT: call void @MT1N9TestClassF1N8__moveto(i8* %[[V3]], i8* %[[V4]], i64 0)
	// CHECK-NEXT: call i32 @g(i8* %[[V4]])
	// CHECK-NEXT: br label %[[MERGE]]
	// CHECK: <label>:[[MERGE]]
	bool v = true;
	unused_result v ? g(TestClass()) : g(TestClass());
}

