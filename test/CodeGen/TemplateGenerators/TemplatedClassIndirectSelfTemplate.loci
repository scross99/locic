// RUN: %locic %s --target x86_64 --emit-llvm -o %t
// RUN: FileCheck < %t %s

// CHECK-LABEL: declare void @f
template <typename T>
import void f();

export {
	
	template <typename T>
	class TestClass() {
		// CHECK-LABEL: define void @MT1N9TestClassF1N6method
		void method() {
			// CHECK: %coerce.mem = alloca {{.*}}
			// CHECK: %[[TPLGEN:[0-9]+]] = load {{.*}} %coerce.mem
			
			// CHECK: %[[TPLGEN_fn:[0-9]+]] = extractvalue {{.*}} %[[TPLGEN]], 0
			// CHECK-NEXT: %[[TPLGEN_path:[0-9]+]] = extractvalue {{.*}} %[[TPLGEN]], 1
			// CHECK-NEXT: %[[path:[0-9]+]] = shl i64 %[[TPLGEN_path]], 1
			// CHECK-NEXT: %[[TPLGEN_part:[0-9]+]] = insertvalue {{.*}} undef, i8* %[[TPLGEN_fn]], 0
			// CHECK-NEXT: %[[TPLGEN:[0-9]+]] = insertvalue {{.*}} %[[TPLGEN_part]], i64 %[[path]], 1
			
			// CHECK: store {{.*}} %[[TPLGEN]], {{.*}} %coerce.arg.source
			// CHECK-NEXT: %[[GEP0:[0-9]+]] = getelementptr {{.*}} %coerce.arg.source, i32 0, i32 0
			// CHECK-NEXT: %[[TPL0:[0-9]+]] = load {{.*}} %[[GEP0]]
			// CHECK-NEXT: %[[GEP1:[0-9]+]] = getelementptr {{.*}} %coerce.arg.source, i32 0, i32 1
			// CHECK-NEXT: %[[TPL1:[0-9]+]] = load {{.*}} %[[GEP1]]
			// CHECK-NEXT: call void @f(i8* %[[TPL0]], i64 %[[TPL1]])
			f<TestClass<T>>();
		}
	}
	
	// CHECK-LABEL: define void @TPLGENT1N9TestClass
	// CHECK:           %[[pos:[0-9]+]] = sub i64 %3, 1
	// CHECK-NEXT:      %[[subpath:[0-9]+]] = lshr i64 %2, %[[pos]]
	// CHECK-NEXT:      %[[subpath_masked:[0-9]+]] = and i64 %[[subpath]], 1
	// CHECK-NEXT:      switch i64 %[[subpath_masked]], label %[[dead_label:[0-9]+]]
	// CHECK-NEXT:          i64 0, label %[[f_label:[0-9]+]]
	// CHECK-NEXT:      ]
	
	// CHECK:         [[dead_label]]:
	// CHECK-NEXT:      unreachable
	
	// CHECK:         [[f_label]]:
	
	// We do a right shift here to pass in the parent's path for the template
	// generator that computes the arguments of TestClass<T>, since this is
	// just a self reference with the same template arguments.
	// CHECK-NEXT:      %[[new_path:[0-9]+]] = lshr i64 %[[subpath]], 1
	
	// CHECK-NEXT:      %[[arg_tplgen_part:[0-9]+]] = insertvalue {{.*}}  undef, i8* %1, 0
	// CHECK-NEXT:      %[[arg_tplgen:[0-9]+]] = insertvalue {{.*}}  %[[arg_tplgen_part]], i64 %[[new_path]], 1
	// CHECK-NEXT:      %[[type_info:[0-9]+]] = insertvalue {{.*}} { {{.*}}@__type_vtable_T1N9TestClass{{.*}}, {{.*}} undef }, {{.*}}  %[[arg_tplgen]], 1
	// CHECK-NEXT:      %[[types_cast:[0-9]+]] = bitcast i8* %0 to {{.*}}
	// CHECK-NEXT:      %[[type_info_ptr:[0-9]+]] = getelementptr inbounds {{.*}} %[[types_cast]], i32 0, i32 0
	// CHECK-NEXT:      store {{.*}} %[[type_info]], {{.*}} %[[type_info_ptr]]
	// CHECK-NEXT:      call void @TPLGENf(i8* %0, i8* %1, i64 %2, i64 %[[pos]])
	// CHECK-NEXT:      ret void
	
}
