// RUN: %locic %s --interpret > %t
// RUN: FileCheck < %t %s

// CHECK: DestroyNotifier.Create
// CHECK: TestClass.Create
// CHECK: TestClass.~
// CHECK: DestroyNotifier.onDestroy

import void printf(const ubyte * str, ...) noexcept;

class DestroyNotifier() {
	static Create() {
		printf(C"DestroyNotifier.Create\n");
		return @();
	}
	
	void onDestroy() noexcept {
		printf(C"DestroyNotifier.onDestroy\n");
	}
}

interface Destroyable {
	void onDestroy() noexcept;
}

template <typename T>
require(T : Destroyable and movable<T>)
class TestClass(T value) {
	static Create(T value) {
		printf(C"TestClass.Create\n");
		return @(move value);
	}
	
	~ {
		printf(C"TestClass.~\n");
		// Check that we can call a method on a template type.
		@value.onDestroy();
	}
}

export int main(unused int argc, unused ubyte ** argv) {
	unused TestClass<DestroyNotifier> object = TestClass<DestroyNotifier>(DestroyNotifier());
	
	return 0;
}

