// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

class DestroyNotifier() {
	static Create() {
		testPrint(C"DestroyNotifier.Create");
		return @();
	}
	
	void onDestroy() noexcept {
		testPrint(C"DestroyNotifier.onDestroy");
	}
}

interface Destroyable {
	void onDestroy() noexcept;
}

template <typename T>
require(T : Destroyable and T : movable)
class TestClass(T value) {
	static Create(T value) {
		testPrint(C"TestClass.Create");
		return @(move value);
	}
	
	~ {
		testPrint(C"TestClass.~");
		// Check that we can call a method on a template type.
		@value.onDestroy();
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	unused TestClass<DestroyNotifier> object = TestClass<DestroyNotifier>(DestroyNotifier());
	
	return 0;
}

