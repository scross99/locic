// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

class InnerClass(int value) {
	static Create(int value) {
		testPrint(C"InnerClass.Create(%d)", value);
		return @(value);
	}
	
	~ {
		testPrint(C"InnerClass.~(%d)", @value);
	}
}

interface Destroyable {
	void __destroy() noexcept;
}

template <typename T>
require(T : Destroyable and is_movable<T>)
class TestClass(T value0, T value1) {
	static Create(T value0, T value1) {
		testPrint(C"TestClass.Create");
		return @(move value0, move value1);
	}
	
	~ {
		testPrint(C"TestClass.~");
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	unused TestClass<InnerClass> object = TestClass<InnerClass>(InnerClass(1), InnerClass(2));
	
	return 0;
}

