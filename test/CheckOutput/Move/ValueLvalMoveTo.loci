// RUN: %locic %s --interpret > %t
// RUN: FileCheck < %t %s

// CHECK: auto testInstance = TestClass(MemberClass());
// CHECK: MemberClass.__move
// CHECK: auto testInstanceMoved = move testInstance;
// CHECK: MemberClass.__move
// CHECK: auto testInstanceMovedAgain = move testInstanceMoved;
// CHECK: MemberClass.__move
// CHECK: MemberClass.~

import void printf(const ubyte * str, ...) noexcept;

class TestClass(lval value_lval_t<MemberClass> member) {
	static create(MemberClass value) noexcept {
		return @(lval(value_lval_t<MemberClass>(move value)));
	}
}

class MemberClass() {
	static create = default;
	
	~ {
		printf(C"MemberClass.~\n");
	}
	
	MemberClass __move() noexcept {
		printf(C"MemberClass.__move\n");
		return MemberClass();
	}
}

export int main(unused int argc, unused ubyte ** argv) {
	printf(C"auto testInstance = TestClass(MemberClass());\n");
	auto testInstance = TestClass(MemberClass());
	
	printf(C"auto testInstanceMoved = move testInstance;\n");
	auto testInstanceMoved = move testInstance;
	
	printf(C"auto testInstanceMovedAgain = move testInstanceMoved;\n");
	unused auto testInstanceMovedAgain = move testInstanceMoved;
	
	return 0;
}

