// RUN: %locic %s --interpret > %t
// RUN: FileCheck < %t %s

import void printf(const ubyte * str, ...) noexcept;

class TestClass(int value) {
	static create(int value) noexcept {
		printf(C"TestClass.create() : value = %d\n", value);
		return @(value);
	}
	
	~ {
		printf(C"TestClass.~() : @value = %d\n", @value);
	}
	
	bool __islive() const noexcept {
		printf(C"TestClass.__islive() : @value = %d\n", @value);
		return @value == 1;
	}
	
	void __setdead() noexcept {
		printf(C"TestClass.__setdead() : @value = %d\n", @value);
	}
	
	TestClass __move() noexcept {
		printf(C"TestClass.__move() : @value = %d\n", @value);
		return @(0);
	}
}

export int main(unused int argc, unused ubyte ** argv) {
	// CHECK: Create
	printf(C"Create\n");
	
	// CHECK-NEXT: TestClass.create() : value = 0
	auto value0 = TestClass(0);
	// CHECK-NEXT: TestClass.create() : value = 1
	auto value1 = TestClass(1);
	// CHECK-NEXT: TestClass.create() : value = 2
	auto value2 = TestClass(2);
	
	// CHECK-NEXT: Move from 1
	printf(C"Move from 1\n");
	
	// This is a normal move operation.
	// CHECK-NEXT: TestClass.__islive() : @value = 1
	// CHECK-NEXT: TestClass.__move() : @value = 1
	// CHECK-NEXT: TestClass.__setdead() : @value = 1
	new(&value0) move value1;
	
	// CHECK-NEXT: Move from 2
	printf(C"Move from 2\n");
	
	// Source value is dead, so set destination value to dead.
	// CHECK-NEXT: TestClass.__islive() : @value = 2
	// CHECK-NEXT: TestClass.__setdead() : @value = 0
	new(&value0) move value2;
	
	// CHECK: Destroy
	printf(C"Destroy\n");
	
	// CHECK-NEXT: TestClass.__islive() : @value = 2
	// CHECK-NEXT: TestClass.__islive() : @value = 1
	// CHECK-NEXT: TestClass.~() : @value = 1
	// CHECK-NEXT: TestClass.__setdead() : @value = 1
	// CHECK-NEXT: TestClass.__islive() : @value = 0
	return 0;
}

