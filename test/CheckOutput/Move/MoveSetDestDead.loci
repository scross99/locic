// RUN: %locic %s --interpret > %t
// RUN: FileCheck < %t %s
// This test needs placement new.
// XFAIL: *

// CHECK: Create
// CHECK: TestClass.create() : value = 1
// CHECK: TestClass.create() : value = 2
// CHECK: Move from 1 -> 2
// CHECK: TestClass.__islive() : @value = 1
// CHECK: TestClass.__move() : @value = 1
// CHECK: TestClass.__setdead() : @value = 1
// CHECK: Move from 2 -> 1
// CHECK: TestClass.__islive() : @value = 2
// CHECK: TestClass.__setdead() : @value = 1
// CHECK: Destroy
// CHECK: TestClass.__islive() : @value = 2
// CHECK: TestClass.__islive() : @value = 1
// CHECK: TestClass.~() : @value = 1
// CHECK: TestClass.__setdead() : @value = 1

import void printf(const ubyte * str, ...) noexcept;

class TestClass(int value) {
	static create(int value) noexcept {
		printf(C"TestClass.create() : value = %d\n", value);
		return @(value);
	}
	
	~ {
		printf(C"TestClass.~() : @value = %d\n", @value);
	}
	
	bool __islive() const noexcept {
		printf(C"TestClass.__islive() : @value = %d\n", @value);
		return @value == 1;
	}
	
	void __setdead() noexcept {
		printf(C"TestClass.__setdead() : @value = %d\n", @value);
	}
	
	TestClass __move() noexcept {
		printf(C"TestClass.__move() : @value = %d\n", @value);
		return @(0);
	}
}

export int main(unused int argc, unused ubyte ** argv) {
	printf(C"Create\n");
	auto value = TestClass(1);
	auto moveValue = TestClass(2);
	
	printf(C"Move from 1 -> 2\n");
	// This is a normal move operation.
	// TODO: this should use placement new.
	moveValue = value.__move();
	
	printf(C"Move from 2 -> 1\n");
	// Source value is dead, so set destination value to dead.
	// TODO: this should use placement new.
	moveValue = value.__move();
	
	printf(C"Destroy\n");
	return 0;
}

