// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

class TestClass(int value) {
	static create(int value) noexcept {
		testPrint(C"TestClass.create() : value = %d", value);
		return @(value);
	}
	
	~ {
		testPrint(C"TestClass.~() : @value = %d", @value);
	}
	
	bool __islive() const noexcept {
		testPrint(C"TestClass.__islive() : @value = %d", @value);
		return @value == 1;
	}
	
	void __setdead() noexcept {
		testPrint(C"TestClass.__setdead() : @value = %d", @value);
	}
	
	void __moveto(unused void* dest, unused size_t offset) noexcept {
		testPrint(C"TestClass.__moveto() : @value = %d", @value);
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	testPrint(C"Create");
	auto value = TestClass(1);
	auto moveValue = TestClass(2);
	
	testPrint(C"Move from 1 -> 2");
	// This is a normal move operation.
	value.__moveto(reinterpret_cast<TestClass*, void*>(&moveValue), 0u);
	
	testPrint(C"Move from 2 -> 1");
	// Source value is dead, so set destination value to dead.
	moveValue.__moveto(reinterpret_cast<TestClass*, void*>(&value), 0u);
	
	testPrint(C"Destroy");
	return 0;
}

