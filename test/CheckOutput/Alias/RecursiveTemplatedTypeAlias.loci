// RUN: %locic %s --interpret > %t
// RUN: FileCheck < %t %s

// CHECK: From object: 101
// CHECK: From alias 0: 102
// CHECK: From alias 1: 103
// CHECK: From alias 2: 104
// CHECK: From alias 3: 105

import void printf(const ubyte * str, ...);

template <typename T : movable_t>
class TestClass(T value) {
	static Create = default;
	
	const T& getValue() {
		return @value;
	}
}

template <typename T : movable_t>
using TestClassAlias0 = TestClass<T>;

template <typename T : movable_t>
using TestClassAlias1 = TestClassAlias0<T>;

template <typename T : movable_t>
using TestClassAlias2 = TestClassAlias1<T>;

template <typename T : movable_t>
using TestClassAlias3 = TestClassAlias2<T>;

export int main(unused int argc, unused ubyte ** argv) {
	TestClass<int> object = TestClass<int>(101);
	printf(C"From object: %d\n", object.getValue());
	
	TestClassAlias0<int> alias0 = TestClassAlias0<int>(102);
	printf(C"From alias 0: %d\n", alias0.getValue());
	
	TestClassAlias0<int> alias1 = TestClassAlias1<int>(103);
	printf(C"From alias 1: %d\n", alias1.getValue());
	
	TestClassAlias0<int> alias2 = TestClassAlias2<int>(104);
	printf(C"From alias 2: %d\n", alias2.getValue());
	
	TestClassAlias0<int> alias3 = TestClassAlias3<int>(105);
	printf(C"From alias 3: %d\n", alias3.getValue());
	return 0;
}

