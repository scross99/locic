// Test output.
import void testPrint(const ubyte * str, ...);

template <typename T : movable_t>
class TestClass(T value) {
	static Create = default;
	
	const T& getValue() {
		return @value;
	}
}

template <typename T : movable_t>
using TestClassAlias0 = TestClass<T>;

template <typename T : movable_t>
using TestClassAlias1 = TestClassAlias0<T>;

template <typename T : movable_t>
using TestClassAlias2 = TestClassAlias1<T>;

template <typename T : movable_t>
using TestClassAlias3 = TestClassAlias2<T>;

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	TestClass<int> object = TestClass<int>(101);
	testPrint(C"From object: %d", object.getValue());
	
	TestClassAlias0<int> alias0 = TestClassAlias0<int>(102);
	testPrint(C"From alias 0: %d", alias0.getValue());
	
	TestClassAlias0<int> alias1 = TestClassAlias1<int>(103);
	testPrint(C"From alias 1: %d", alias1.getValue());
	
	TestClassAlias0<int> alias2 = TestClassAlias2<int>(104);
	testPrint(C"From alias 2: %d", alias2.getValue());
	
	TestClassAlias0<int> alias3 = TestClassAlias3<int>(105);
	testPrint(C"From alias 3: %d", alias3.getValue());
	return 0;
}

