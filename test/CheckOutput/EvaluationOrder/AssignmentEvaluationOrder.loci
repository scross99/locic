// Test output.
import void testPrint(const ubyte * str, ...);

lval<int> ptr_lval_t<int> getPtrLval(int* ptr) {
	testPrint(C"getPtrLval");
	return *ptr;
}

int getValue(const ubyte* type) {
	testPrint(C"getValue for %s", type);
	return 42;
}

class CustomLval(int* ptr) {
	static create = default;
	
	void assign(int value) {
		*@ptr = value;
	}
}

lval<int> CustomLval getCustomLval(int* ptr) {
	testPrint(C"getCustomLval");
	return lval<int>(CustomLval(ptr));
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	// Expecting right-to-left evaluation order here.
	
	int value = 0;
	
	{
		// First check that ptr_lval assignments are right-to-left;
		// this is potentially different to custom lvals because
		// ptr_lval is a primitive.
		getPtrLval(&value) = getValue(C"ptr_lval");
	}
	
	{
		// Check that user-specified lval assignments are right-to-left.
		getCustomLval(&value) = getValue(C"custom lval");
	}
	return 0;
}

