// Test output.
import void testPrint(const ubyte * str, ...);

interface serializable {
	const ubyte * toCString();
}

template <typename T>
require(T : serializable and is_movable<T>)
// Use a 'value_lval' since it supports move operations.
class custom_lval(bool hasValue, lval<T> value_lval_t<T> value) {
	static Create(T value) {
		testPrint(C"custom_lval.Create: Value = %s", value.toCString());
		return @(true, lval<T>(value_lval_t<T>(move value)));
	}
	
	T* address() {
		if (!@hasValue) {
			testPrint(C"INVALID!");
		}
		
		testPrint(C"custom_lval.address: Value = %s", @value.toCString());
		return &@value;
	}

	void assign(T value) {
		if (@hasValue) {
			testPrint(C"custom_lval.assign: Previous value = %s", @value.toCString());
		} else {
			testPrint(C"custom_lval.assign: Previous value = [NONE]");
		}
		testPrint(C"custom_lval.assign: New value = %s", value.toCString());
		@value = move value;
		@hasValue = true;
	}
	
	T& dissolve() {
		if (!@hasValue) {
			testPrint(C"INVALID!");
		}
		
		testPrint(C"custom_lval.dissolve: Value = %s", @value.toCString());
		return @value;
	}
	
	T move() {
		if (!@hasValue) {
			testPrint(C"INVALID!");
		}
		
		testPrint(C"custom_lval.move: Value = %s", @value.toCString());
		@hasValue = false;
		return move @value;
	}
}

class TestClass(int a, int b) {
	static Create(int a, int b) {
		return @(a, b);
	}
	
	const ubyte* toCString() {
		if (@a == 0) {
			if (@b == 0) {
				return C"Both Zero";
			}
		}
		
		if (@a < @b) {
			return C"OrderedLess";
		}
		
		if (@a > @b) {
			return C"OrderedMore";
		}
		
		return C"OrderedEqual";
	}
}

void addressAssignFunction(lval<TestClass> custom_lval<TestClass>& objectLval, TestClass value) {
	TestClass* valuePtr = &objectLval;
	
	testPrint(C"addressAssignFunction: Previous value = %s", (*valuePtr).toCString());
	
	*valuePtr = move value;
	
	testPrint(C"addressAssignFunction: New value = %s", (*valuePtr).toCString());
}

void assignFunction(lval<TestClass> custom_lval<TestClass>& objectLval, TestClass value) {
	testPrint(C"assignFunction: Previous value = %s", objectLval.toCString());
	
	objectLval = move value;
	
	testPrint(C"assignFunction: New value = %s", objectLval.toCString());
}

void moveFunction(lval<TestClass> custom_lval<TestClass>& objectLval) {
	testPrint(C"moveFunction: Previous value = %s", objectLval.toCString());
	
	TestClass value = move objectLval;
	
	testPrint(C"moveFunction: Moved value = %s", value.toCString());
	
	objectLval = TestClass(0, 0);
	
	testPrint(C"moveFunction: New value = %s", objectLval.toCString());
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	lval<TestClass> custom_lval<TestClass> value = lval<TestClass>(custom_lval<TestClass>(TestClass(2, 2)));
	
	testPrint(C"testEntryPoint: Value = %s", value.toCString());
	
	addressAssignFunction(value, TestClass(1, 2));
	
	testPrint(C"testEntryPoint: Value = %s", value.toCString());
	
	assignFunction(value, TestClass(2, 1));
	
	testPrint(C"testEntryPoint: Value = %s", value.toCString());
	
	moveFunction(value);
	
	testPrint(C"testEntryPoint: Value = %s", value.toCString());
	
	return 0;
}

