// Test output.
import void testPrint(const ubyte * str, ...);

void assignFunction(lval<int> value_lval_t<int>& objectLval, int value) {
	testPrint(C"assignFunction: Previous value = %d", objectLval);
	objectLval = value;
	testPrint(C"assignFunction: New value = %d", objectLval);
}

void moveFunction(lval<int> value_lval_t<int>& objectLval) {
	testPrint(C"moveFunction: Previous value = %d", objectLval);
	int value = move objectLval;
	testPrint(C"moveFunction: Moved value = %d", value);
	objectLval = 0;
	testPrint(C"moveFunction: New value = %d", objectLval);
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	int value = 4;
	
	testPrint(C"testEntryPoint: Value = %d", value);
	
	assignFunction(value, 10);
	
	testPrint(C"testEntryPoint: Value = %d", value);
	
	moveFunction(value);
	
	testPrint(C"testEntryPoint: Value = %d", value);
	
	assignFunction(value, 20);
	
	testPrint(C"testEntryPoint: Value = %d", value);
	
	return 0;
}

