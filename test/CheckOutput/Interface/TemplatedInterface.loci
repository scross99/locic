// Test output.
import void testPrint(const ubyte * str, ...);

class TestClass (int value) {
	static Create(int value) {
		testPrint(C"TestClass.Create: Value = %d", value);
		return @(value);
	}
	
	int getValue() const {
		testPrint(C"TestClass.getValue: Value = %d", @value);
		return @value;
	}
	
	void setValue(int value) {
		testPrint(C"TestClass.setValue: Value = %d", value);
		@value = value;
	}
	
}

template <typename T : movable_t>
interface ValueHolder {
	T getValue() const;
	
	void setValue(T value);
}

void polymorphicPrint(ValueHolder<int>& holder) {
	final int value = holder.getValue();
	testPrint(C"polymorphicPrint: Value = %d", value);
	holder.setValue(holder.getValue() * 2);
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	auto testInstance = TestClass(1);
	
	polymorphicPrint(testInstance);
	polymorphicPrint(testInstance);
	polymorphicPrint(testInstance);
	return 0;
}

