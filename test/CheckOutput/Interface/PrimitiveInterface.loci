// Test output.
import void testPrint(const ubyte * str, ...);

template <typename T>
require(is_movable<notag(T)>)
interface PrimitiveInterface {
	notag(T) add(const T& value) const;
}

void polymorphicAddAndPrint(const PrimitiveInterface<int>& value1, int value2) {
	auto sum = value1.add(value2);
	testPrint(C"polymorphicAddAndPrint: Sum = %d", sum);
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	int value1 = 4;
	int value2 = 5;
	
	testPrint(C"Value1 = %d", value1);
	testPrint(C"Value2 = %d", value2);
	
	polymorphicAddAndPrint(value1, value2);
	
	return 0;
}

