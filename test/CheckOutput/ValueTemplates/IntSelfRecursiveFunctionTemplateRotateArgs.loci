// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

template <int value0, int value1>
int addValues(bool recurse) {
	if(recurse) {
		return addValues<value1, value0>(false) + 1;
	} else {
		return value0 * 2 + value1;
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	testPrint(C"addValues<1, 2>(true) = %d", (addValues<1, 2>(true)));
	testPrint(C"addValues<2, 3>(true) = %d", (addValues<2, 3>(true)));
	testPrint(C"addValues<3, 4>(true) = %d", (addValues<3, 4>(true)));
	testPrint(C"addValues<4, 5>(true) = %d", (addValues<4, 5>(true)));
	testPrint(C"addValues<5, 6>(true) = %d", (addValues<5, 6>(true)));
	return 0;
}

