// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

class TypeWithDestructor(int value) {
	static create(int value) noexcept {
		testPrint(C"Constructor called with value=%d.", value);
		return @(value);
	}
	
	copy = default;
	
	~ {
		// This destructor forces a liveness indicator to be created.
		testPrint(C"Destructor called with value=%d.", @value);
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	auto object = TypeWithDestructor(0);
	testPrint(C"object.islive: %s", object.__islive() ? C"YES" : C"NO");
	
	auto objectCopy = object.copy();
	testPrint(C"objectCopy.islive: %s", objectCopy.__islive() ? C"YES" : C"NO");
	
	unused auto objectMove = move object;
	
	// Sanity check.
	testPrint(C"After move: object.islive: %s", object.__islive() ? C"YES" : C"NO");
	
	return 0;
}

