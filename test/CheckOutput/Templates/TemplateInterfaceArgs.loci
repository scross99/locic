// Test output.
import void testPrint(const ubyte * str, ...);

interface Printable {
	void print();
}

class FirstClass(int i) {
	static Create = default;
	
	void print() {
		testPrint(C"FirstClass: %d", @i);
	}
}

class SecondClass(int i) {
	static Create = default;
	
	void print() {
		testPrint(C"SecondClass: %d", @i);
	}
}

template <typename A, typename B>
require(A : Printable and A : movable_t and B : Printable and B : movable_t)
class TestClass(A a, B b) {
	static Create = default;
	
	void print() {
		testPrint(C"TestClass -> print A");
		@a.print();
		testPrint(C"TestClass -> print B");
		@b.print();
	}
}

void polymorphicPrint(Printable& printable) {
	testPrint(C"polymorphicPrint()");
	printable.print();
}

class PolymorphicClass(Printable& printable) {
	static Create = default;
	
	void print() {
		testPrint(C"PolymorphicClass.print()");
		@printable.print();
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	FirstClass a = FirstClass(100);
	SecondClass b = SecondClass(200);
	
	TestClass<FirstClass, SecondClass> testClass = TestClass<FirstClass, SecondClass>(move a, move b);
	polymorphicPrint(testClass);
	
	PolymorphicClass polyClass = PolymorphicClass(testClass);
	polymorphicPrint(polyClass);
	
	//PolymorphicClass polyClass2 = PolymorphicClass(polyClass);
	//polymorphicPrint(polyClass2);
	
	return 0;
}

