// Test output.
import void testPrint(const ubyte * str, ...);

interface Incrementable {
	void addOne();
	
	void print();
}

class TestClassInt (int value) {
	static Create(int value) {
		return @(value);
	}
	
	void addOne() {
		@value = @value + 1;
	}
	
	void print() {
		testPrint(C"TestClassInt: value = %d", @value);
	}
}

class TestClassFloat (float value) {
	static Create(float value) {
		return @(value);
	}
	
	void addOne() {
		@value = @value + 1.0f;
	}
	
	void print() {
		testPrint(C"TestClassFloat: value = %f", @value);
	}
}

template <typename T>
require(T : Incrementable and is_movable<T>)
class TestClass(T value) {
	static Create(T value) {
		return @(move value);
	}
	
	void addOne() {
		@value.addOne();
	}
	
	void addTwo() {
		@value.addOne();
		@value.addOne();
	}
	
	void print() {
		@value.print();
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	TestClass<TestClassInt> intObject = TestClass<TestClassInt>(TestClassInt(99));
	
	intObject.print();
	
	intObject.addOne();
	intObject.print();
	
	intObject.addTwo();
	intObject.print();
	
	TestClass<TestClassFloat> floatObject = TestClass<TestClassFloat>(TestClassFloat(99.0f));
	
	floatObject.print();
	
	floatObject.addOne();
	floatObject.print();
	
	floatObject.addTwo();
	floatObject.print();
	
	return 0;
}

