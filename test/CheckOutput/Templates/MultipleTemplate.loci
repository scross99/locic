// RUN: %locic %s --interpret > %t
// RUN: FileCheck < %t %s

// CHECK: TestClassInt: value = 99
// CHECK: TestClassInt: value = 100
// CHECK: TestClassInt: value = 102
// CHECK: TestClassFloat: value = 99.000000
// CHECK: TestClassFloat: value = 100.000000
// CHECK: TestClassFloat: value = 102.000000

import void printf(const ubyte * str, ...);

interface Incrementable {
	void addOne();
	
	void print();
}

class TestClassInt (int value) {
	static Create(int value) {
		return @(value);
	}
	
	void addOne() {
		@value = @value + 1;
	}
	
	void print() {
		printf(C"TestClassInt: value = %d\n", @value);
	}
}

class TestClassFloat (float value) {
	static Create(float value) {
		return @(value);
	}
	
	void addOne() {
		@value = @value + 1.0f;
	}
	
	void print() {
		printf(C"TestClassFloat: value = %f\n", @value);
	}
}

template <typename T>
require(T : Incrementable and movable<T>)
class TestClass(T value) {
	static Create(T value) {
		return @(move value);
	}
	
	void addOne() {
		@value.addOne();
	}
	
	void addTwo() {
		@value.addOne();
		@value.addOne();
	}
	
	void print() {
		@value.print();
	}
}

export int main(unused int argc, unused ubyte ** argv) {
	TestClass<TestClassInt> intObject = TestClass<TestClassInt>(TestClassInt(99));
	
	intObject.print();
	
	intObject.addOne();
	intObject.print();
	
	intObject.addTwo();
	intObject.print();
	
	TestClass<TestClassFloat> floatObject = TestClass<TestClassFloat>(TestClassFloat(99.0f));
	
	floatObject.print();
	
	floatObject.addOne();
	floatObject.print();
	
	floatObject.addTwo();
	floatObject.print();
	
	return 0;
}

