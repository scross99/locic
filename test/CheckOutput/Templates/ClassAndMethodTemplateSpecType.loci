// RUN: %locic %s --interpret > %t
// RUN: FileCheck < %t %s

// CHECK: TestClass::printObject
// CHECK: PrintableClass: i = 4242
// CHECK: TestClass::printObjectWithPrinter
// CHECK: PrintOtherClass: Printing other class...
// CHECK: PrintableClass: i = 4343
// CHECK: TestClass::printObjectWithPrinter
// CHECK: PrintOtherClassTemplated: Printing other class...
// CHECK: PrintableClass: i = 4444

import void printf(const ubyte * str, ...);

interface Printable {
	void print() const;
}

template <typename T>
interface PrintOther {
	void printOther(const T& value);
}

template <typename S>
class TestClass(S object) {
	static create = default;
	
	S& object() {
		return @object;
	}
	
	void printObject() require(S : Printable) {
		printf(C"TestClass::printObject\n");
		@object.print();
	}
	
	template <typename T: PrintOther<S>>
	void printObjectWithPrinter(T object) {
		printf(C"TestClass::printObjectWithPrinter\n");
		object.printOther(@object);
	}
}

class PrintableClass(int i) {
	static create = default;
	
	void setValue(int i) {
		@i = i;
	}
	
	void print() const {
		printf(C"PrintableClass: i = %d\n", @i);
	}
}

class PrintOtherClass() {
	static create = default;
	
	void printOther(const PrintableClass& printableClass) {
		printf(C"PrintOtherClass: Printing other class...\n");
		printableClass.print();
	}
}

template <typename T: Printable>
class PrintOtherClassTemplated() {
	static create = default;
	
	void printOther(const T& printableClass) {
		printf(C"PrintOtherClassTemplated: Printing other class...\n");
		printableClass.print();
	}
}

export int main(unused int argc, unused ubyte ** argv) {
	TestClass<PrintableClass> testObject = TestClass<PrintableClass>(PrintableClass(4242));
	
	testObject.printObject();
	
	testObject.object().setValue(4343);
	
	testObject.printObjectWithPrinter<PrintOtherClass>(PrintOtherClass());
	
	testObject.object().setValue(4444);
	
	testObject.printObjectWithPrinter<PrintOtherClassTemplated<PrintableClass>>(PrintOtherClassTemplated<PrintableClass>());
	
	return 0;
}

