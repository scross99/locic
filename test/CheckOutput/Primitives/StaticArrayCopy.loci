// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

class TestClass(int v) {
	static create = default;
	
	TestClass copy() const {
		testPrint(C"TestClass copy: @v = %d", @v);
		return TestClass(@v * @v);
	}
	
	int getValue() const {
		return @v;
	}
}

void printArray(const static_array_t<TestClass, 4u>& array) {
	testPrint(C"array[0] = %d", array[0u].getValue());
	testPrint(C"array[1] = %d", array[1u].getValue());
	testPrint(C"array[2] = %d", array[2u].getValue());
	testPrint(C"array[3] = %d", array[3u].getValue());
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	auto array = static_array_t<TestClass, 4u>.uninitialized();
	array[0u] = TestClass(1);
	array[1u] = TestClass(2);
	array[2u] = TestClass(3);
	array[3u] = TestClass(4);
	printArray(array);
	
	auto arrayCopy = array.copy();
	printArray(arrayCopy);
	
	auto arrayCopyCopy = arrayCopy.copy();
	printArray(arrayCopyCopy);
	return 0;
}

