// RUN: %locic %s --interpret > %t
// RUN: FileCheck < %t %s

// CHECK: alignof(unsigned byte) = 1
// CHECK: sizeof(unsigned byte) = 1
// CHECK: i = 10
// CHECK: i.implicitcopy() = 10
// CHECK: i.copy() = 10
// CHECK: i.implicitcast<unsigned short>() = 10
// CHECK: i.cast<unsigned short>() = 10
// CHECK: i.add(3u) = 13
// CHECK: i.subtract(3u) = 7
// CHECK: i.multiply(3u) = 30
// CHECK: i.divide(3u) = 3
// CHECK: i.modulo(3u) = 1
// CHECK: i.equal(0u) = false
// CHECK: i.not_equal(0u) = true
// CHECK: i.less_than(0u) = false
// CHECK: i.less_than_or_equal(0u) = false
// CHECK: i.greater_than(0u) = true
// CHECK: i.greater_than_or_equal(0u) = true
// CHECK: i.compare(0u) = greater than
// CHECK: i.equal(10u) = true
// CHECK: i.not_equal(10u) = false
// CHECK: i.less_than(10u) = false
// CHECK: i.less_than_or_equal(10u) = true
// CHECK: i.greater_than(10u) = false
// CHECK: i.greater_than_or_equal(10u) = true
// CHECK: i.compare(10u) = equal
// CHECK: i.equal(20u) = false
// CHECK: i.not_equal(20u) = true
// CHECK: i.less_than(20u) = true
// CHECK: i.less_than_or_equal(20u) = true
// CHECK: i.greater_than(20u) = false
// CHECK: i.greater_than_or_equal(20u) = false
// CHECK: i.compare(20u) = less than
// CHECK: move i = 10

import void printf(const ubyte * str, ...) noexcept;

const ubyte* compareResultString(compare_result_t result) {
	if (result.is_equal()) {
		return C"equal\n";
	} else if (result.is_less_than()) {
		return C"less than\n";
	} else if (result.is_greater_than()) {
		return C"greater than\n";
	} else {
		unreachable;
	}
}

export int main(unused int argc, unused ubyte ** argv) {
	printf(C"alignof(unsigned byte) = %llu\n", alignof(unsigned byte).cast<ulonglong_t>());
	printf(C"sizeof(unsigned byte) = %llu\n", sizeof(unsigned byte).cast<ulonglong_t>());
	
	unsigned byte i = 10u;
	printf(C"i = %u\n", i);
	printf(C"i.implicitcopy() = %u\n", i.implicitcopy());
	printf(C"i.copy() = %u\n", i.copy());
	printf(C"i.implicitcast<unsigned short>() = %ld\n", i.implicitcast<unsigned short>());
	printf(C"i.cast<unsigned short>() = %ld\n", i.cast<unsigned short>());
	
	printf(C"i.add(3u) = %u\n", i.add(3u));
	printf(C"i.subtract(3u) = %u\n", i.subtract(3u));
	printf(C"i.multiply(3u) = %u\n", i.multiply(3u));
	printf(C"i.divide(3u) = %u\n", i.divide(3u));
	printf(C"i.modulo(3u) = %u\n", i.modulo(3u));
	
	printf(C"i.equal(0u) = %s\n", i.equal(0u) ? C"true\n" : C"false\n");
	printf(C"i.not_equal(0u) = %s\n", i.not_equal(0u) ? C"true\n" : C"false\n");
	printf(C"i.less_than(0u) = %s\n", i.less_than(0u) ? C"true\n" : C"false\n");
	printf(C"i.less_than_or_equal(0u) = %s\n", i.less_than_or_equal(0u) ? C"true\n" : C"false\n");
	printf(C"i.greater_than(0u) = %s\n", i.greater_than(0u) ? C"true\n" : C"false\n");
	printf(C"i.greater_than_or_equal(0u) = %s\n", i.greater_than_or_equal(0u) ? C"true\n" : C"false\n");
	printf(C"i.compare(0u) = %s\n", compareResultString(i.compare(0u)));
	
	printf(C"i.equal(10u) = %s\n", i.equal(10u) ? C"true\n" : C"false\n");
	printf(C"i.not_equal(10u) = %s\n", i.not_equal(10u) ? C"true\n" : C"false\n");
	printf(C"i.less_than(10u) = %s\n", i.less_than(10u) ? C"true\n" : C"false\n");
	printf(C"i.less_than_or_equal(10u) = %s\n", i.less_than_or_equal(10u) ? C"true\n" : C"false\n");
	printf(C"i.greater_than(10u) = %s\n", i.greater_than(10u) ? C"true\n" : C"false\n");
	printf(C"i.greater_than_or_equal(10u) = %s\n", i.greater_than_or_equal(10u) ? C"true\n" : C"false\n");
	printf(C"i.compare(10u) = %s\n", compareResultString(i.compare(10u)));
	
	printf(C"i.equal(20u) = %s\n", i.equal(20u) ? C"true\n" : C"false\n");
	printf(C"i.not_equal(20u) = %s\n", i.not_equal(20u) ? C"true\n" : C"false\n");
	printf(C"i.less_than(20u) = %s\n", i.less_than(20u) ? C"true\n" : C"false\n");
	printf(C"i.less_than_or_equal(20u) = %s\n", i.less_than_or_equal(20u) ? C"true\n" : C"false\n");
	printf(C"i.greater_than(20u) = %s\n", i.greater_than(20u) ? C"true\n" : C"false\n");
	printf(C"i.greater_than_or_equal(20u) = %s\n", i.greater_than_or_equal(20u) ? C"true\n" : C"false\n");
	printf(C"i.compare(20u) = %s\n", compareResultString(i.compare(20u)));
	
	printf(C"move i = %u\n", move i);
	return 0;
}

