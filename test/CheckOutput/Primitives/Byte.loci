// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

const ubyte* compareResultString(compare_result_t result) {
	if (result.is_equal()) {
		return C"equal";
	} else if (result.is_less_than()) {
		return C"less than";
	} else if (result.is_greater_than()) {
		return C"greater than";
	} else {
		unreachable;
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	testPrint(C"alignof(byte) = %llu", alignof(byte).cast<ulonglong_t>());
	testPrint(C"sizeof(byte) = %llu", sizeof(byte).cast<ulonglong_t>());
	
	byte i = 10;
	testPrint(C"i = %d", i);
	testPrint(C"i.implicitcopy() = %d", i.implicitcopy());
	testPrint(C"i.copy() = %d", i.copy());
	testPrint(C"i.implicitcast<short>() = %ld", i.implicitcast<short>());
	testPrint(C"i.cast<short>() = %ld", i.cast<short>());
	testPrint(C"i.plus() = %d", i.plus());
	testPrint(C"i.minus() = %d", i.minus());
	testPrint(C"i.abs() = %d", i.abs());
	testPrint(C"i.minus().abs() = %d", i.minus().abs());
	
	testPrint(C"i.add(3) = %d", i.add(3));
	testPrint(C"i.subtract(3) = %d", i.subtract(3));
	testPrint(C"i.multiply(3) = %d", i.multiply(3));
	testPrint(C"i.divide(3) = %d", i.divide(3));
	testPrint(C"i.modulo(3) = %d", i.modulo(3));
	
	testPrint(C"i.equal(0) = %s", i.equal(0) ? C"true" : C"false");
	testPrint(C"i.not_equal(0) = %s", i.not_equal(0) ? C"true" : C"false");
	testPrint(C"i.less_than(0) = %s", i.less_than(0) ? C"true" : C"false");
	testPrint(C"i.less_than_or_equal(0) = %s", i.less_than_or_equal(0) ? C"true" : C"false");
	testPrint(C"i.greater_than(0) = %s", i.greater_than(0) ? C"true" : C"false");
	testPrint(C"i.greater_than_or_equal(0) = %s", i.greater_than_or_equal(0) ? C"true" : C"false");
	testPrint(C"i.compare(0) = %s", compareResultString(i.compare(0)));
	
	testPrint(C"i.equal(10) = %s", i.equal(10) ? C"true" : C"false");
	testPrint(C"i.not_equal(10) = %s", i.not_equal(10) ? C"true" : C"false");
	testPrint(C"i.less_than(10) = %s", i.less_than(10) ? C"true" : C"false");
	testPrint(C"i.less_than_or_equal(10) = %s", i.less_than_or_equal(10) ? C"true" : C"false");
	testPrint(C"i.greater_than(10) = %s", i.greater_than(10) ? C"true" : C"false");
	testPrint(C"i.greater_than_or_equal(10) = %s", i.greater_than_or_equal(10) ? C"true" : C"false");
	testPrint(C"i.compare(10) = %s", compareResultString(i.compare(10)));
	
	testPrint(C"i.equal(20) = %s", i.equal(20) ? C"true" : C"false");
	testPrint(C"i.not_equal(20) = %s", i.not_equal(20) ? C"true" : C"false");
	testPrint(C"i.less_than(20) = %s", i.less_than(20) ? C"true" : C"false");
	testPrint(C"i.less_than_or_equal(20) = %s", i.less_than_or_equal(20) ? C"true" : C"false");
	testPrint(C"i.greater_than(20) = %s", i.greater_than(20) ? C"true" : C"false");
	testPrint(C"i.greater_than_or_equal(20) = %s", i.greater_than_or_equal(20) ? C"true" : C"false");
	testPrint(C"i.compare(20) = %s", compareResultString(i.compare(20)));
	
	testPrint(C"move i = %d", move i);
	return 0;
}

