// These ABI checks are copied from Clang's test/CodeGen/x86_32-arguments-darwin.c.
//
// RUN: %locic %s --target i386-apple-darwin9 --mcpu yonah --emit-llvm -o %t
// RUN: FileCheck < %t %s

// CHECK-LABEL: define signext i8 @f0()
export byte f0() {
	return 0;
}

// CHECK-LABEL: define signext i16 @f1()
export short f1() {
	return 0;
}

// CHECK-LABEL: define i32 @f2()
export int f2() {
	return 0;
}

// CHECK-LABEL: define float @f3()
export float f3() {
	return 0.0f;
}

// CHECK-LABEL: define double @f4()
export double f4() {
	return 0.0;
}

// CHECK-LABEL: define x86_fp80 @f5()
export long double f5() {
	return 0.0;
}

// CHECK-LABEL: define void @f6(i8 signext, i16 signext, i32, i64, i8*)
export void f6(unused byte a0, unused short a1, unused int a2,
               unused long long a3, unused void *a4) {}

// CHECK-LABEL: define void @f7(i32)
enum e7 { A, B, C };
export void f7(unused e7 a0) {}

// CHECK-LABEL: define i64 @f8_1()
// CHECK-LABEL: define void @f8_2(i32, i32)
struct s8 {
	int a;
	int b;
};
export s8 f8_1() { while (true) {}; unreachable; }
export void f8_2(unused s8 a0) {}

// This should be passed just as s8.

/*
// FIXME-CHECK-LABEL: define i64 @f9_1()

// FIXME: llvm-gcc expands this, this may have some value for the
// backend in terms of optimization but doesn't change the ABI.
// FIXME-CHECK-LABEL: define void @f9_2(%struct.s9* byval align 4 %a0)
struct s9 {
	int a : 17;
	int b;
};
export s9 f9_1() { while (true) {} }
export void f9_2(s9 a0) {}
*/

// Return of small structures and unions

// CHECK: float @f10()
union s10_union { };

struct s10 {
	s10_union empty;
	float f;
};

export s10 f10() { while (true) {}; unreachable; }

/*
// Small vectors and 1 x {i64,double} are returned in registers

// FIXME-CHECK: i32 @f11()
// FIXME-CHECK: void @f12(<2 x i32>* noalias sret %agg.result)
// FIXME-CHECK: i64 @f13()
// FIXME-CHECK: i64 @f14()
// FIXME-CHECK: <2 x i64> @f15()
// FIXME-CHECK: <2 x i64> @f16()
typedef short T11 __attribute__ ((vector_size (4)));
T11 f11() { while (true) {} }
typedef int T12 __attribute__ ((vector_size (8)));
T12 f12() { while (true) {} }
typedef long long T13 __attribute__ ((vector_size (8)));
T13 f13() { while (true) {} }
typedef double T14 __attribute__ ((vector_size (8)));
T14 f14() { while (true) {} }
typedef long long T15 __attribute__ ((vector_size (16)));
T15 f15() { while (true) {} }
typedef double T16 __attribute__ ((vector_size (16)));
T16 f16() { while (true) {} }
*/

/*
// And when the single element in a struct (but not for 64 and
// 128-bits).

// FIXME-CHECK: i32 @f17()
// FIXME-CHECK: void @f18(%{{.*}}* noalias sret %agg.result)
// FIXME-CHECK: void @f19(%{{.*}}* noalias sret %agg.result)
// FIXME-CHECK: void @f20(%{{.*}}* noalias sret %agg.result)
// FIXME-CHECK: void @f21(%{{.*}}* noalias sret %agg.result)
// FIXME-CHECK: void @f22(%{{.*}}* noalias sret %agg.result)
struct { T11 a; } f17() { while (true) {} }
struct { T12 a; } f18() { while (true) {} }
struct { T13 a; } f19() { while (true) {} }
struct { T14 a; } f20() { while (true) {} }
struct { T15 a; } f21() { while (true) {} }
struct { T16 a; } f22() { while (true) {} }
*/

// Single element structures are handled specially

// CHECK: float @f23()
struct s23 {
	float a;
};

export s23 f23() { while (true) {}; unreachable; }

// CHECK: float @f24()
struct s24 {
	float[1] a;
};

export s24 f24() { while (true) {}; unreachable; }

// CHECK: float @f25()
struct s25_empty { };
struct s25 {
	s25_empty a;
	s24 b;
};

export s25 f25() { while (true) {}; unreachable; }

// Small structures are handled recursively
// CHECK: i32 @f26()
struct s26_twobytes {
	byte a;
	byte b;
};

struct s26 {
	s26_twobytes a;
	s26_twobytes b;
};

export s26 f26() { while (true) {}; unreachable; }

// CHECK: void @f27({ { i8, i8, i8 }, { i8 } }* noalias sret %agg.result)
struct s27_threebytes {
	byte a;
	byte b;
	byte c;
};

struct s27_onebyte {
	byte a;
};

struct s27 {
	s27_threebytes a;
	s27_onebyte b;
};

export s27 f27() { while (true) {}; unreachable; }

// CHECK: void @f28({ i32, [0 x i32] }* noalias sret %agg.result)
struct s28 { int a; int[0] b; };
export s28 f28() { while (true) {}; unreachable; }

// CHECK-LABEL: define i16 @f29()
struct s29_empty { };
struct s29 { s29_empty[1] a; byte b; byte c; };
export s29 f29() { while (true) {}; unreachable; }

/*
// FIXME-CHECK-LABEL: define i16 @f30()
struct s30 { byte a; byte b : 4; } f30() { while (true) {} }

// FIXME-CHECK-LABEL: define float @f31()
struct s31 { byte : 0; float b; byte : 0; } f31() { while (true) {} }

// FIXME-CHECK-LABEL: define i32 @f32()
struct s32 { byte a; unsigned : 0; } f32() { while (true) {} }

// FIXME-CHECK-LABEL: define float @f33()
struct s33 { float a; long long : 0; } f33() { while (true) {} }

// FIXME-CHECK-LABEL: define float @f34()
struct s34 { struct { int : 0; } a; float b; } f34() { while (true) {} }

// FIXME-CHECK-LABEL: define i16 @f35()
struct s35 { struct { int : 0; } a; byte b; byte c; } f35() { while (true) {} }

// FIXME-CHECK-LABEL: define i16 @f36()
struct s36 { struct { int : 0; } a[2][10]; byte b; byte c; } f36() { while (true) {} }
*/

// FIXME: This causes the compiler to break!
// FIXME-CHECK-LABEL: define float @f37()
//struct s37 { float[1][1] c; };
//export s37 f37() { while (true) {}; unreachable; }

// CHECK-LABEL: define void @f38({ [3 x i8], i16 }* noalias sret %agg.result)
struct s38 { byte[3] a; short b; };
export s38 f38() { while (true) {}; unreachable; }

/*
// FIXME-CHECK-LABEL: define void @f39(%struct.s39* byval align 16 %x)
typedef int v39 __attribute((vector_size(16)));
struct s39 { v39 x; };
void f39(struct s39 x) {}

// <rdar://problem/7247671>
// FIXME-CHECK-LABEL: define i32 @f40()
enum e40 { ec0 = 0 };
export e40 f40() { }
*/

// CHECK-LABEL: define i8* @f41()
using vvbp = (*)(void)();
export vvbp f41() { unreachable; }

/*
// FIXME-CHECK-LABEL: define i32 @f42()
struct s42 { e40 f0; }
export s42 f42() { }

// FIXME-CHECK-LABEL: define i64 @f43()
struct s43 { enum e40 f0; int f1; };
s43 f43() { }
*/

// CHECK-LABEL: define i8* @f44()
struct s44 { vvbp f0; };
export s44 f44() { unreachable; }

// CHECK-LABEL: define i64 @f45()
struct s45 { vvbp f0; int f1; };
export s45 f45() { unreachable; }

/*
// FIXME-CHECK-LABEL: define void @f46(i32 %a0)
void f46(enum e40 a0) { }
*/

// CHECK-LABEL: define void @f47(i8*)
export void f47(unused vvbp a1) { }

/*
// FIXME-CHECK-LABEL: define void @f48(i32 %a0.0)
struct s48 { enum e40 f0; };
void f48(struct s48 a0) { }

// FIXME-CHECK-LABEL: define void @f49(i32 %a0.0, i32 %a0.1)
struct s49 { enum e40 f0; int f1; };
void f49(struct s49 a0) { }
*/

// CHECK-LABEL: define void @f50(i8*)
struct s50 { vvbp f0; };
export void f50(unused s50 a0) { }

// CHECK-LABEL: define void @f51(i8*, i32)
struct s51 { vvbp f0; int f1; };
export void f51(unused s51 a0) { }

// CHECK-LABEL: define void @f52({ x86_fp80 }* byval align 4)
struct s52 {
	long double a;
};
export void f52(unused s52 x) {}

/*
// FIXME-CHECK-LABEL: define void @f53(%struct.s53* byval align 4)
struct __attribute__((aligned(32))) s53 {
	int x;
	int y;
};
void f53(struct s53 x) {}

typedef unsigned short v2i16 __attribute__((__vector_size__(4)));

// FIXME-CHECK-LABEL: define i32 @f54(i32 %arg.coerce)
// rdar://8359483
v2i16 f54(v2i16 arg) { return arg+arg; }


typedef int v4i32 __attribute__((__vector_size__(16)));

// FIXME-CHECK-LABEL: define <2 x i64> @f55(<4 x i32> %arg)
// PR8029
v4i32 f55(v4i32 arg) { return arg+arg; }

// FIXME-CHECK-LABEL: define void @f56(
// FIXME-CHECK: i8 signext %a0, %struct.s56_0* byval align 4 %a1,
// FIXME-CHECK: i64 %a2.coerce, %struct.s56_1* byval align 4,
// FIXME-CHECK: i64 %a4.coerce, %struct.s56_2* byval align 4,
// FIXME-CHECK: <4 x i32> %a6, %struct.s56_3* byval align 16 %a7,
// FIXME-CHECK: <2 x double> %a8, %struct.s56_4* byval align 16 %a9,
// FIXME-CHECK: <8 x i32> %a10, %struct.s56_5* byval align 4,
// FIXME-CHECK: <4 x double> %a12, %struct.s56_6* byval align 4)

// FIXME-CHECK:	 call void (i32, ...)* @f56_0(i32 1,
// FIXME-CHECK: i32 %{{[^ ]*}}, %struct.s56_0* byval align 4 %{{[^ ]*}},
// FIXME-CHECK: i64 %{{[^ ]*}}, %struct.s56_1* byval align 4 %{{[^ ]*}},
// FIXME-CHECK: i64 %{{[^ ]*}}, %struct.s56_2* byval align 4 %{{[^ ]*}},
// FIXME-CHECK: <4 x i32> %{{[^ ]*}}, %struct.s56_3* byval align 16 %{{[^ ]*}},
// FIXME-CHECK: <2 x double> %{{[^ ]*}}, %struct.s56_4* byval align 16 %{{[^ ]*}},
// FIXME-CHECK: <8 x i32> {{[^ ]*}}, %struct.s56_5* byval align 4 %{{[^ ]*}},
// FIXME-CHECK: <4 x double> {{[^ ]*}}, %struct.s56_6* byval align 4 %{{[^ ]*}})
// FIXME-CHECK: }
//
// <rdar://problem/7964854> [i386] clang misaligns long double in structures
// when passed byval
// <rdar://problem/8431367> clang misaligns parameters on stack
typedef int __attribute__((vector_size (8))) t56_v2i;
typedef double __attribute__((vector_size (8))) t56_v1d;
typedef int __attribute__((vector_size (16))) t56_v4i;
typedef double __attribute__((vector_size (16))) t56_v2d;
typedef int __attribute__((vector_size (32))) t56_v8i;
typedef double __attribute__((vector_size (32))) t56_v4d;

struct s56_0 { byte a; };
struct s56_1 { t56_v2i a; };
struct s56_2 { t56_v1d a; };
struct s56_3 { t56_v4i a; };
struct s56_4 { t56_v2d a; };
struct s56_5 { t56_v8i a; };
struct s56_6 { t56_v4d a; };

void f56(byte a0, struct s56_0 a1, 
				 t56_v2i a2, struct s56_1 a3, 
				 t56_v1d a4, struct s56_2 a5, 
				 t56_v4i a6, struct s56_3 a7, 
				 t56_v2d a8, struct s56_4 a9, 
				 t56_v8i a10, struct s56_5 a11, 
				 t56_v4d a12, struct s56_6 a13) {
	extern void f56_0(int x, ...);
	f56_0(1, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9,
				a10, a11, a12, a13);
}

// FIXME-CHECK-LABEL: define void @f57(i32 %x.0, i32 %x.1)
// FIXME-CHECK: call void @f57(
struct s57 { _Complex int x; };
void f57(struct s57 x) {} void f57a() { f57((struct s57){1}); }
*/

// CHECK-LABEL: define void @f58()
union u58 {};
export void f58(unused u58 x) {}

/*
// FIXME-CHECK-LABEL: define i64 @f59()
struct s59 { float x __attribute((aligned(8))); };
struct s59 f59() { while (true) {} }

// FIXME-CHECK-LABEL: define void @f60(%struct.s60* byval align 4, i32 %y)
struct s60 { int x __attribute((aligned(8))); };
void f60(struct s60 x, int y) {}

// FIXME-CHECK-LABEL: define void @f61(i32 %x, %struct.s61* byval align 16 %y)
typedef int T61 __attribute((vector_size(16)));
struct s61 { T61 x; int y; };
void f61(int x, struct s61 y) {}

// FIXME-CHECK-LABEL: define void @f62(i32 %x, %struct.s62* byval align 4)
typedef int T62 __attribute((vector_size(16)));
struct s62 { T62 x; int y; } __attribute((packed, aligned(8)));
void f62(int x, struct s62 y) {}

// FIXME-CHECK-LABEL: define i32 @f63
// FIXME-CHECK: ptrtoint
// FIXME-CHECK: and {{.*}}, -16
// FIXME-CHECK: inttoptr
typedef int T63 __attribute((vector_size(16)));
struct s63 { T63 x; int y; };
int f63(int i, ...) {
	__builtin_va_list ap;
	__builtin_va_start(ap, i);
	struct s63 s = __builtin_va_arg(ap, struct s63);
	__builtin_va_end(ap);
	return s.y;
}
*/

// CHECK-LABEL: define void @f64({ [0 x i8], [0 x i8] }* byval align 4)
struct s64 { signed byte[0] a; signed byte[0] b; };
export void f64(unused s64 x) {}

// CHECK-LABEL: define float @f65()
struct s65 { signed byte[0] a; float b; };
export s65 f65() { unreachable; }

/*
// FIXME-CHECK-LABEL: define <2 x i64> @f66
// FIXME-CHECK: ptrtoint
// FIXME-CHECK: and {{.*}}, -16
// FIXME-CHECK: inttoptr
typedef int T66 __attribute((vector_size(16)));
T66 f66(int i, ...) {
	__builtin_va_list ap;
	__builtin_va_start(ap, i);
	T66 v = __builtin_va_arg(ap, T66);
	__builtin_va_end(ap);
	return v;
}

// PR14453
struct s67 { _Complex unsigned short int a; };
void f67(struct s67 x) {}
// FIXME-CHECK-LABEL: define void @f67(%struct.s67* byval align 4 %x)
*/
