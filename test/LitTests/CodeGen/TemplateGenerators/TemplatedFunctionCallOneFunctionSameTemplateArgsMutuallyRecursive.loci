// RUN: %locic %s --target x86_64 --emit-llvm -o %t
// RUN: FileCheck < %t %s

// Currently fails because pass-through optimisation is not yet enabled.
// XFAIL: *

// CHECK-LABEL: define void @f
template <typename T>
export void f() {
	// CHECK: %coerce.mem = alloca { i8*, i32 }
	// CHECK: %[[f_TPLGEN:[0-9]+]] = load { i8*, i32 }* %coerce.mem
	
	// CHECK: store { i8*, i32 } %[[f_TPLGEN]], { i8*, i32 }* %coerce.arg.source
	// CHECK-NEXT: %[[f_GEP0:[0-9]+]] = getelementptr { i8*, i32 }* %coerce.arg.source, i32 0, i32 0
	// CHECK-NEXT: %[[f_TPL0:[0-9]+]] = load i8** %[[f_GEP0]]
	// CHECK-NEXT: %[[f_GEP1:[0-9]+]] = getelementptr { i8*, i32 }* %coerce.arg.source, i32 0, i32 1
	// CHECK-NEXT: %[[f_TPL1:[0-9]+]] = load i32* %[[f_GEP1]]
	// CHECK-NEXT: call void @g(i8* %[[f_TPL0]], i32 %[[f_TPL1]])
	g<T>();
}

// CHECK-LABEL: define void @g
template <typename T>
export void g() {
	// CHECK: %coerce.mem = alloca { i8*, i32 }
	// CHECK: %[[g_TPLGEN:[0-9]+]] = load { i8*, i32 }* %coerce.mem
	
	// CHECK: store { i8*, i32 } %[[g_TPLGEN]], { i8*, i32 }* %coerce.arg.source
	// CHECK-NEXT: %[[g_GEP0:[0-9]+]] = getelementptr { i8*, i32 }* %coerce.arg.source, i32 0, i32 0
	// CHECK-NEXT: %[[g_TPL0:[0-9]+]] = load i8** %[[g_GEP0]]
	// CHECK-NEXT: %[[g_GEP1:[0-9]+]] = getelementptr { i8*, i32 }* %coerce.arg.source, i32 0, i32 1
	// CHECK-NEXT: %[[g_TPL1:[0-9]+]] = load i32* %[[g_GEP1]]
	// CHECK-NEXT: call void @f(i8* %[[g_TPL0]], i32 %[[g_TPL1]])
	f<T>();
}

// CHECK-LABEL: define void @TPLGENf
// CHECK-NEXT:      ret void
// CHECK:       }

// CHECK-LABEL: define void @TPLGENg
// CHECK-NEXT:      ret void
// CHECK:       }
