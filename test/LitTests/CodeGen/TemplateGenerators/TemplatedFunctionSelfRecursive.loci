// RUN: %locic %s --target x86_64 --emit-llvm -o %t
// RUN: FileCheck < %t %s

// CHECK-LABEL: define void @function
template <typename T>
export void function(int i) {
	// CHECK: %coerce.mem = alloca {{.*}}
	// CHECK: %[[TPLGEN:[0-9]+]] = load {{.*}} %coerce.mem
	if (i > 0) {
		// Make sure we're passing the template generator straight into
		// the recursive call without modifying the path argument.
		
		// CHECK: store {{.*}} %[[TPLGEN]], {{.*}} %coerce.arg.source
		// CHECK-NEXT: %[[GEP0:[0-9]+]] = getelementptr {{.*}} %coerce.arg.source, i32 0, i32 0
		// CHECK-NEXT: %[[TPL0:[0-9]+]] = load {{.*}} %[[GEP0]]
		// CHECK-NEXT: %[[GEP1:[0-9]+]] = getelementptr {{.*}} %coerce.arg.source, i32 0, i32 1
		// CHECK-NEXT: %[[TPL1:[0-9]+]] = load {{.*}} %[[GEP1]]
		// CHECK-NEXT: call void @function({{.*}}, i8* %[[TPL0]], i32 %[[TPL1]])
		function<T>(i - 1);
	}
}

// Make sure the template generator always returns and doesn't try to recurse.

// CHECK-LABEL: define void @TPLGENfunction
// CHECK-NEXT:      ret void
// CHECK-NEXT:  }
