// RUN: %locic %s --interpret > %t
// RUN: FileCheck < %t %s

// CHECK: ---- checkSize()
// CHECK: sizeof(TypeWithoutDestructor) = 8
// CHECK: sizeof(TypeWithDestructor) = 8
// CHECK: ---- checkLive()
// CHECK: Destructor called.
// CHECK: ---- checkDead()
// CHECK: ---- checkMove()
// CHECK: * Move object.
// CHECK: * Destroy moved object.
// CHECK: Destructor called.
// CHECK: * Destroy original object.

import void printf(const ubyte * str, ...) noexcept;

class TypeWithoutDestructor(uint8_t value8, uint32_t value32) {
	static create() noexcept {
		return @(0u, 0u);
	}
}

class TypeWithDestructor(uint8_t value8, uint32_t value32) {
	static create() noexcept {
		return @(0u, 0u);
	}
	
	~ {
		// This destructor forces a liveness indicator to
		// be created, which can be added as a gap byte
		// since the alignment of the uint32_t leaves a
		// 3 byte gap after the uint8_t value.
		printf(C"Destructor called.\n");
	}
}

void checkSize() {
	printf(C"---- checkSize()\n");
	printf(C"sizeof(TypeWithoutDestructor) = %llu\n",
		sizeof(TypeWithoutDestructor).cast<ulonglong_t>());
	
	printf(C"sizeof(TypeWithDestructor) = %llu\n",
		sizeof(TypeWithDestructor).cast<ulonglong_t>());
}

void checkLive() {
	printf(C"---- checkLive()\n");
	unused auto value = TypeWithDestructor();
}

void checkDead() {
	printf(C"---- checkDead()\n");
	auto value = TypeWithDestructor();
	value.__setdead();
}

void checkMove() {
	printf(C"---- checkMove()\n");
	auto value = TypeWithDestructor();
	{
		printf(C"* Move object.\n");
		unused auto movedValue = move value;
		printf(C"* Destroy moved object.\n");
	}
	printf(C"* Destroy original object.\n");
}

export int main(unused int argc, unused ubyte ** argv) {
	checkSize();
	checkLive();
	checkDead();
	checkMove();
	return 0;
}

