// RUN: %locic %s --emit-llvm -o %t

template <typename S, typename T>
class A() {
	static create(unused int value) {
		return @();
	}
}

class B() { }

class C() { }

import void f0(A<B, C> arg);
import void f1(int i, A<B, C> arg);
import void f2(A<B, C> arg, int i);
import void f3(int i, A<B, C> arg, int j);
import void f4(A<B, C> arg0, A<B, C> arg1);

export void constructTemplateInFunctionCall() {
	// This should be interpreted as constructing a type 'A' with template
	// arguments 'B' and 'C' and constructor argument '1'.
	f0(A<B, C>(1));
	f1(10, A<B, C>(1));
	f2(A<B, C>(1), 10);
	f3(10, A<B, C>(1), 10);
	f4(A<B, C>(1), A<B, C>(1));
}
