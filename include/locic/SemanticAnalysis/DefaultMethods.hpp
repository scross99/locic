#ifndef LOCIC_SEMANTICANALYSIS_DEFAULTMETHODS_HPP
#define LOCIC_SEMANTICANALYSIS_DEFAULTMETHODS_HPP

#include <memory>

namespace locic {
	
	class Name;
	
	namespace AST {
		
		class FunctionDecl;
		
	}
	
	namespace Debug {
		
		struct FunctionInfo;
		class SourceLocation;
		
	}
	
	namespace SEM {
		
		class TypeInstance;
		
	}
	
	namespace SemanticAnalysis {
		
		class Context;
		
		Debug::FunctionInfo
		makeDefaultFunctionInfo(const SEM::TypeInstance& parentType,
		                        const AST::FunctionDecl& function);
		
		class DefaultMethods {
		public:
			DefaultMethods(Context& context);
			
			std::unique_ptr<AST::FunctionDecl>
			createAutoGeneratedDecl(SEM::TypeInstance* typeInstance,
			                        const Name& name, bool isStatic);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultConstructorDecl(SEM::TypeInstance* typeInstance,
			                             const Name& name);
			
			void completeDefaultConstructorDecl(SEM::TypeInstance* typeInstance,
			                                    AST::FunctionDecl& function);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultAlignMaskDecl(SEM::TypeInstance* typeInstance,
			                           const Name& name);
			
			void completeDefaultAlignMaskDecl(SEM::TypeInstance* typeInstance,
			                                  AST::FunctionDecl& function);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultSizeOfDecl(SEM::TypeInstance* typeInstance,
			                        const Name& name);
			
			void completeDefaultSizeOfDecl(SEM::TypeInstance* typeInstance,
			                               AST::FunctionDecl& function);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultDestroyDecl(SEM::TypeInstance* typeInstance,
			                         const Name& name);
			
			void completeDefaultDestroyDecl(SEM::TypeInstance* typeInstance,
			                                AST::FunctionDecl& function);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultMoveDecl(SEM::TypeInstance* typeInstance,
			                      const Name& name);
			
			void completeDefaultMoveDecl(SEM::TypeInstance* typeInstance,
			                             AST::FunctionDecl& function);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultImplicitCopyDecl(SEM::TypeInstance* typeInstance,
			                              const Name& name);
			
			void completeDefaultImplicitCopyDecl(SEM::TypeInstance* typeInstance,
			                                     AST::FunctionDecl& function);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultExplicitCopyDecl(SEM::TypeInstance* typeInstance,
			                              const Name& name);
			
			void completeDefaultExplicitCopyDecl(SEM::TypeInstance* typeInstance,
			                                     AST::FunctionDecl& function);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultCompareDecl(SEM::TypeInstance* typeInstance,
			                         const Name& name);
			
			void completeDefaultCompareDecl(SEM::TypeInstance* typeInstance,
			                                AST::FunctionDecl& function);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultSetDeadDecl(SEM::TypeInstance* typeInstance,
			                         const Name& name);
			
			void completeDefaultSetDeadDecl(SEM::TypeInstance* typeInstance,
			                                AST::FunctionDecl& function);
			
			std::unique_ptr<AST::FunctionDecl>
			createDefaultIsLiveDecl(SEM::TypeInstance* typeInstance,
			                        const Name& name);
			
			void completeDefaultIsLiveDecl(SEM::TypeInstance* typeInstance,
			                               AST::FunctionDecl& function);
			
			void
			completeDefaultMethodDecl(SEM::TypeInstance* typeInstance,
			                          AST::Node<AST::FunctionDecl>& function);
			
			bool hasDefaultConstructor(SEM::TypeInstance* typeInstance);
			
			bool hasDefaultAlignMask(SEM::TypeInstance* typeInstance);
			
			bool hasDefaultSizeOf(SEM::TypeInstance* typeInstance);
			
			bool hasDefaultDestroy(SEM::TypeInstance* typeInstance);
			
			bool hasDefaultMove(SEM::TypeInstance* typeInstance);
			
			bool hasDefaultImplicitCopy(SEM::TypeInstance* typeInstance);
			
			bool hasDefaultExplicitCopy(SEM::TypeInstance* typeInstance);
			
			bool hasDefaultCompare(SEM::TypeInstance* typeInstance);
			
			bool hasDefaultSetDead(SEM::TypeInstance* typeInstance);
			
			bool hasDefaultIsLive(SEM::TypeInstance* typeInstance);
			
			void
			createDefaultConstructor(SEM::TypeInstance* typeInstance,
			                         AST::FunctionDecl& function,
			                         const Debug::SourceLocation& location);
			
			bool
			createDefaultImplicitCopy(SEM::TypeInstance* typeInstance,
			                          AST::FunctionDecl& function,
			                          const Debug::SourceLocation& location);
			
			bool
			createDefaultExplicitCopy(SEM::TypeInstance* typeInstance,
			                          AST::FunctionDecl& function,
			                          const Debug::SourceLocation& location);
			
			bool
			createDefaultCompare(SEM::TypeInstance* typeInstance,
			                     AST::FunctionDecl& function,
			                     const Debug::SourceLocation& location);
			
			bool
			createDefaultMethod(SEM::TypeInstance* typeInstance,
			                    AST::FunctionDecl& function,
			                    const Debug::SourceLocation& location);
			
		private:
			Context& context_;
			
		};
		
	}
	
}

#endif
