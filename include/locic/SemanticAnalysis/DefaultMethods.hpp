#ifndef LOCIC_SEMANTICANALYSIS_DEFAULTMETHODS_HPP
#define LOCIC_SEMANTICANALYSIS_DEFAULTMETHODS_HPP

#include <memory>

namespace locic {
	
	class Name;
	
	namespace AST {
		
		class Function;
		class TypeInstance;
		
	}
	
	namespace Debug {
		
		struct FunctionInfo;
		class SourceLocation;
		
	}
	
	namespace SemanticAnalysis {
		
		class Context;
		
		Debug::FunctionInfo
		makeDefaultFunctionInfo(const AST::TypeInstance& parentType,
		                        const AST::Function& function);
		
		class DefaultMethods {
		public:
			DefaultMethods(Context& context);
			
			std::unique_ptr<AST::Function>
			createAutoGeneratedDecl(AST::TypeInstance* typeInstance,
			                        const Name& name, bool isStatic);
			
			std::unique_ptr<AST::Function>
			createDefaultConstructorDecl(AST::TypeInstance* typeInstance,
			                             const Name& name);
			
			void completeDefaultConstructorDecl(AST::TypeInstance* typeInstance,
			                                    AST::Function& function);
			
			std::unique_ptr<AST::Function>
			createDefaultAlignMaskDecl(AST::TypeInstance* typeInstance,
			                           const Name& name);
			
			void completeDefaultAlignMaskDecl(AST::TypeInstance* typeInstance,
			                                  AST::Function& function);
			
			std::unique_ptr<AST::Function>
			createDefaultSizeOfDecl(AST::TypeInstance* typeInstance,
			                        const Name& name);
			
			void completeDefaultSizeOfDecl(AST::TypeInstance* typeInstance,
			                               AST::Function& function);
			
			std::unique_ptr<AST::Function>
			createDefaultDestroyDecl(AST::TypeInstance* typeInstance,
			                         const Name& name);
			
			void completeDefaultDestroyDecl(AST::TypeInstance* typeInstance,
			                                AST::Function& function);
			
			std::unique_ptr<AST::Function>
			createDefaultMoveDecl(AST::TypeInstance* typeInstance,
			                      const Name& name);
			
			void completeDefaultMoveDecl(AST::TypeInstance* typeInstance,
			                             AST::Function& function);
			
			std::unique_ptr<AST::Function>
			createDefaultImplicitCopyDecl(AST::TypeInstance* typeInstance,
			                              const Name& name);
			
			void completeDefaultImplicitCopyDecl(AST::TypeInstance* typeInstance,
			                                     AST::Function& function);
			
			std::unique_ptr<AST::Function>
			createDefaultExplicitCopyDecl(AST::TypeInstance* typeInstance,
			                              const Name& name);
			
			void completeDefaultExplicitCopyDecl(AST::TypeInstance* typeInstance,
			                                     AST::Function& function);
			
			std::unique_ptr<AST::Function>
			createDefaultCompareDecl(AST::TypeInstance* typeInstance,
			                         const Name& name);
			
			void completeDefaultCompareDecl(AST::TypeInstance* typeInstance,
			                                AST::Function& function);
			
			std::unique_ptr<AST::Function>
			createDefaultSetDeadDecl(AST::TypeInstance* typeInstance,
			                         const Name& name);
			
			void completeDefaultSetDeadDecl(AST::TypeInstance* typeInstance,
			                                AST::Function& function);
			
			std::unique_ptr<AST::Function>
			createDefaultIsLiveDecl(AST::TypeInstance* typeInstance,
			                        const Name& name);
			
			void completeDefaultIsLiveDecl(AST::TypeInstance* typeInstance,
			                               AST::Function& function);
			
			void
			completeDefaultMethodDecl(AST::TypeInstance* typeInstance,
			                          AST::Node<AST::Function>& function);
			
			bool hasDefaultConstructor(AST::TypeInstance* typeInstance);
			
			bool hasDefaultAlignMask(AST::TypeInstance* typeInstance);
			
			bool hasDefaultSizeOf(AST::TypeInstance* typeInstance);
			
			bool hasDefaultDestroy(AST::TypeInstance* typeInstance);
			
			bool hasDefaultMove(AST::TypeInstance* typeInstance);
			
			bool hasDefaultImplicitCopy(AST::TypeInstance* typeInstance);
			
			bool hasDefaultExplicitCopy(AST::TypeInstance* typeInstance);
			
			bool hasDefaultCompare(AST::TypeInstance* typeInstance);
			
			bool hasDefaultSetDead(AST::TypeInstance* typeInstance);
			
			bool hasDefaultIsLive(AST::TypeInstance* typeInstance);
			
			void
			createDefaultConstructor(AST::TypeInstance* typeInstance,
			                         AST::Function& function,
			                         const Debug::SourceLocation& location);
			
			bool
			createDefaultImplicitCopy(AST::TypeInstance* typeInstance,
			                          AST::Function& function,
			                          const Debug::SourceLocation& location);
			
			bool
			createDefaultExplicitCopy(AST::TypeInstance* typeInstance,
			                          AST::Function& function,
			                          const Debug::SourceLocation& location);
			
			bool
			createDefaultCompare(AST::TypeInstance* typeInstance,
			                     AST::Function& function,
			                     const Debug::SourceLocation& location);
			
			bool
			createDefaultMethod(AST::TypeInstance* typeInstance,
			                    AST::Function& function,
			                    const Debug::SourceLocation& location);
			
		private:
			Context& context_;
			
		};
		
	}
	
}

#endif
