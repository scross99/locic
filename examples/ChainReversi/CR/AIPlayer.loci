// Chain Reversi AI Player.

namespace CR {

	class AIPlayer (sf::RenderWindow& window, bool isWaiting, sf::Clock clock) {
		static Create(sf::RenderWindow& window) {
			return @(window, false, sf::Clock());
		}
		
		OptionalPosition performMove(const Board& board) {
			// This AI is very fast; too fast!
			// Hence it must wait for half a
			// second before playing each move.
			if (!self.isReady()) { return None(); }
			
			unsigned long bestQuality = 0u;
			auto bestPosition = Position(0u, 0u);
			
			for (auto xi: range<size_t>(0, 8)) {
				for (auto yi: range<size_t>(0, 8)) {
					auto position = Position(xi, yi);
					if (!board.isValid(position)) {
						continue;
					}
					
					const auto quality = self.scoreQuality(board, position);
					if (quality >= bestQuality) {
						bestQuality = quality;
						bestPosition = position;
					}
				}
			}
			
			return Some(bestPosition);
		}
		
		bool isReady() {
			if (!@isWaiting) {
				@clock.restart();
				@isWaiting = true;
				return false;
			}
			
			if (@clock.getElapsedTime().asSeconds() < 0.5f) {
				return false;
			}
			
			@isWaiting = false;
			return true;
		}
		
		unsigned long scoreQuality(const Board& board, const Position& position) const {
			auto analysis = BoardAnalysis(board);
			
			auto boardCopy = board.copy();
			boardCopy.placeMove(position);
			
			unsigned long quality = 10000u;
			
			auto copyAnalysis = BoardAnalysis(boardCopy);
			
			if (copyAnalysis.hasWinner()) {
				// Opponent has a winner -> this move is bad.
				return 1u;
			} else if (boardCopy.isComplete()) {
				// This move is a winner -> this move is very good.
				return 100000u;
			}
			
			// Edges are good.
			if (position.isEdge()) { quality += 10u; }
			
			// Diagonals are very good.
			if (position.isDiagonal()) { quality += 50u; }
			
			// Corners are fantastic.
			quality += (copyAnalysis.countCorners(board.player()) - analysis.countCorners(board.player())) * 1000u;
			
			// Opponents getting corners is very bad.
			quality -= copyAnalysis.reachableCorners() * 1000u;
			
			return quality;
		}
		
		void gameOver(unused bool win) { }
	}
	
}

