
namespace ANN {
	
	class Layer(size_t numNeurons, size_t numInputsPerNeuron,
	            std::varray<Neuron> neurons) {
		
		static create(size_t numNeurons, size_t numInputsPerNeuron) {
			auto neurons = std::varray<Neuron>();
			neurons.reserve(numNeurons);
			
			for (auto i: range<size_t>(0, numNeurons)) {
				neurons.push_back(Neuron(numInputsPerNeuron));
			}
			
			return @(numNeurons, numInputsPerNeuron, move neurons);
		}
		
		void getWeights(std::varray<double>& weights) {
			for (auto i: range<size_t>(0, @numNeurons)) {
				@neurons[i].getWeights(weights);
			}
		}
		
		void setWeights(size_t* pos, std::varray<double>& weights) {
			for (auto i: range<size_t>(0, @numNeurons)) {
				@neurons[i].setWeights(pos, weights);
			}
		}
		
		size_t getNumWeights() {
			size_t t = 0u;
			
			for (auto i: range<size_t>(0, @numNeurons)) {
				t += @neurons[i].getNumWeights();
			}
			
			return t;
		}
		
		std::varray<double> update(const std::varray<double>& input) {
			auto outputs = std::varray<double>();
			outputs.reserve(@numNeurons);
		
			for (auto i: range<size_t>(0, @numNeurons)) {
				outputs.push_back(@neurons[i].update(input));
			}
			
			return move outputs;
		}
		
		void error(size_t index, double error) {
			for (auto i: range<size_t>(0, @numNeurons)) {
				@neurons[i].error(index, error);
			}
		}
		
		void zeroGradient(size_t index) {
			for (auto i: range<size_t>(0, @numNeurons)) {
				@neurons[i].zeroGradient(index);
			}
		}
		
		void gradient(size_t index, std::varray<double>& gradient) {
			for (auto i: range<size_t>(0, @numNeurons)) {
				@neurons[i].gradient(index, gradient[i]);
			}
			
			gradient.resize(@numInputsPerNeuron, 0.0);
			
			for (auto i: range<size_t>(0, @numInputsPerNeuron)) {
				gradient[i] = 0.0;
				
				for (auto j: range<size_t>(0, @numNeurons)) {
					gradient[i] += @neurons[j].getGradient(i);
				}
			}
		}
	}
	
}
