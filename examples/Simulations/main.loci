
// Entry point.
export int main(unused int argc, unused ubyte ** argv) {
	const unsigned int frameRate = 25u;
	const float zoomRate = 1.1f;
	const float moveRate = 0.1f;
	const float size = 1000.0f;
	const float halfSize = size / 2.0f;
	const float minZoom = 0.5f;
	const float maxZoom = 10.0f;
	
	float currentZoom = 1.0f;
	
	const auto font = sf::Font(C"Data/font.ttf");
	
	auto renderWindow = sf::RenderWindow(sf::VideoMode(800u, 800u, 32u), C"Simulations");
	
	auto view = sf::View::FromRect(sf::FloatRect(sf::Vector2f(0.0f, 0.0f), sf::Vector2f(size, size)));
	renderWindow.setView(view);
	
	renderWindow.setFramerateLimit(frameRate);
	
	auto simulationNameText = sf::Text();
	simulationNameText.setFont(font);
	simulationNameText.setCharacterSize(90u);
	//simulationNameText.setStyle(sf::Text::Underlined);
	simulationNameText.setPosition(sf::Vector2f(0.0f, 0.0f));
	
	uint8_t simulationNameTextAlpha = 255u;
	
	auto checkpointSimulation = Simulations::Checkpoint::RandomSimulation();
	auto followingSimulation = Simulations::Flocking::FollowingSimulation();
	auto centralOrbitSimulation = Simulations::Gravity::CentralOrbitSimulation(frameRate.cast<size_t>());
	
	auto simulationList = Simulations::SimulationList();
	simulationList.addSimulation(checkpointSimulation);
	simulationList.addSimulation(followingSimulation);
	simulationList.addSimulation(centralOrbitSimulation);
	
	while (renderWindow.isOpen()) {
		// Clear screen to black.
		renderWindow.clear(sf::Color::Black());
		
		while (true) {
			const auto optionalEvent = renderWindow.pollEvent();
			if (optionalEvent.empty()) {
				break;
			}
			
			const auto event = optionalEvent.get();
			switch (event) {
				case sf::CloseEvent() {
					renderWindow.close();
				}
				case sf::KeyPressed(sf::Keyboard::Code keyCode) {
					switch (keyCode) {
						case sf::Keyboard::Left() {
							simulationList.moveLeft();
							simulationNameTextAlpha = 255u;
						}
						case sf::Keyboard::Right() {
							simulationList.moveRight();
							simulationNameTextAlpha = 255u;
						}
						case sf::Keyboard::Up() {
							currentZoom *= zoomRate;
							currentZoom = min<float>(currentZoom, maxZoom);
							
							view.setSize(sf::Vector2f(2.0f * (halfSize / currentZoom), 2.0f * (halfSize / currentZoom)));
						}
						case sf::Keyboard::Down() {
							currentZoom *= 1.0f / zoomRate;
							currentZoom = max<float>(currentZoom, minZoom);
							
							view.setSize(sf::Vector2f(2.0f * (halfSize / currentZoom), 2.0f * (halfSize / currentZoom)));
						}
						case sf::Keyboard::W() {
							sf::Vector2f center = view.getCenter();
							const sf::Vector2f halfSizeVector = view.getSize() / 2.0f;
							center.y -= halfSizeVector.y * moveRate;
							
							if (center.y < 0.0f) {
								center.y = 0.0f;
							}
							
							view.setCenter(center);
						}
						case sf::Keyboard::A() {
							sf::Vector2f center = view.getCenter();
							const sf::Vector2f halfSizeVector = view.getSize() / 2.0f;
							center.x -= halfSizeVector.x * moveRate;
							
							if(center.x < 0.0f){
								center.x = 0.0f;
							}
							
							view.setCenter(center);
						}
						case sf::Keyboard::S() {
							sf::Vector2f center = view.getCenter();
							const sf::Vector2f halfSizeVector = view.getSize() / 2.0f;
							center.y += halfSizeVector.y * moveRate;
							
							if(center.y > size){
								center.y = size;
							}
							
							view.setCenter(center);
						}
						case sf::Keyboard::D() {
							sf::Vector2f center = view.getCenter();
							const sf::Vector2f halfSizeVector = view.getSize() / 2.0f;
							center.x += halfSizeVector.x * moveRate;
							
							if(center.x > size){
								center.x = size;
							}
							
							view.setCenter(center);
						}
						case sf::Keyboard::Escape() {
							renderWindow.close();
						}
						default {
							// Ignore all other keys.
						}
					}
				}
				default {
					// Ignore all other events.
				}
			}
		}
		
		renderWindow.setView(view);
		
		simulationList.update(renderWindow);
		
		simulationList.render(renderWindow);
		
		// Reset view for drawing string.
		renderWindow.setView(sf::View::FromRect(sf::FloatRect(sf::Vector2f(0.0f, 0.0f), sf::Vector2f(size, size))));
		
		simulationNameText.setString(simulationList.getName().make_buffer().c_str());
		
		simulationNameText.setColor(sf::Color(255u, 255u, 255u, simulationNameTextAlpha));
		if (simulationNameTextAlpha > 0u) {
			simulationNameTextAlpha -= 5u;
		}
		
		renderWindow.drawText(simulationNameText);
		
		renderWindow.display();
	}
	
	return 0;
}

