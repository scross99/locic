template <typename T : movable_t>
class UnitData(T data) {
	static create = default;
	
	const T& value() const {
		return @data;
	}
	
	template <bool IsConst>
	const<IsConst>(T)* data() const(IsConst) {
		return &@data;
	}
	
	size_t size() const {
		return 1u;
	}
}

void runTCPExample() {
	printf(C"================ TCP EXAMPLE ================\n");
	
	const std::tcp::port_t port = 10101u;
	
	auto listener = std::tcp::listener(port);
	
	printf(C"Created TCP listener.\n");
	
	auto connector = std::tcp::connector(std::tcp::endpoint(std::ip::address_v4.localhost(), port));
	
	printf(C"Created TCP connector.\n");
	
	auto waitSet = std::event::wait_set.edge_triggered();
	waitSet.insert(listener.event_source());
	waitSet.insert(connector.event_source());
	
	while (true) {
		waitSet.wait();
		
		if (connector.check()) {
			printf(C"Connector is ready.\n");
		}
		
		if (listener.check()) {
			printf(C"Listener is ready.\n");
		}
		
		if (connector.check() && listener.check()) {
			break;
		}
	}
	
	printf(C"TCP Connected.\n");
	
	auto connectStream = std::tcp::connector_get(move connector);
	printf(C"Connect peer endpoint: %s\n", connectStream.peer().to_string().make_buffer().c_str());
	auto connectSyncStream = std::tcp::sync_stream(connectStream);
	
	auto listenStream = listener.get();
	printf(C"Listen peer endpoint: %s\n", listenStream.peer().to_string().make_buffer().c_str());
	auto listenSyncStream = std::tcp::sync_stream(listenStream);
	
	{
		printf(C"Writing a byte of data to connect-side stream...\n");
		auto writeData = UnitData<uint8_t>(255u);
		connectSyncStream.sync_write(writeData);
	}
	
	{
		printf(C"Reading a byte of data from listen-side stream...\n");
		auto readData = UnitData<uint8_t>(0u);
		listenSyncStream.sync_read(readData);
		
		printf(C"Read byte = %llu\n", readData.value().cast<ulonglong_t>());
	}
	
	const auto string = "Hello world!";
	const auto buffer = string.make_buffer();
	
	{
		printf(C"Writing '%s' to listen-side stream...\n", buffer.c_str());
		listenSyncStream.sync_write(buffer);
	}
	
	{
		printf(C"Reading data from connect-side stream...\n");
		auto readData = std::varray<uint8_t>();
		readData.resize(buffer.size(), 0u);
		connectSyncStream.sync_read(readData);
		
		printf(C"Read data = %s\n", readData.data());
	}
	
	printf(C"\n\n\n");
}

