# Build matrix / environment variable are explained on:
# http://about.travis-ci.org/docs/user/build-configuration/
# This file can be validated on:
# http://lint.travis-ci.org/

language: cpp

compiler:
  - gcc
  - clang

before_install:
  - sudo apt-get update

  # Ensure add-apt-repository is installed.
  - sudo apt-get install python-software-properties

  # LLVM
  - sudo sh -c "echo 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main' >> /etc/apt/sources.list"
  - sudo sh -c "echo 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.5 main' >> /etc/apt/sources.list"
  - sudo sh -c "echo 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.6 main' >> /etc/apt/sources.list"
  - sudo sh -c "echo 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise main' >> /etc/apt/sources.list"
  - wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -

  # Boost
  - sudo add-apt-repository --yes ppa:boost-latest/ppa

  # g++4.8.1
  - sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test

  - sudo add-apt-repository --yes ppa:h-rayflood/llvm

  # SFML 2
  - sudo add-apt-repository --yes ppa:sonkun/sfml-development

install:
  # Install package dependencies.
  # (Re-run this command a few times to handle random failures.)
  -
    for i in {1..5}; do
      if sudo apt-get update && sudo apt-get install -y $LLVM_PACKAGE "clang-$CLANG_VERSION" libconfig++8-dev python-sphinx libboost-program-options1.55-dev libboost-regex1.55-dev libboost-system1.55-dev libboost-filesystem1.55-dev libcsfml-dev texlive-latex-recommended texlive-fonts-recommended texlive-latex-extra; then
        break;
      fi;
      sleep 1;
    done

  # Install a recent version of g++ to build the compiler (with C++11 support).
  -
    if [[ "${CXX}" == "g++" ]]; then
      sudo apt-get install -y g++-4.8; export CXX="g++-4.8";
    fi

  # Use a recent version of clang++ to build the compiler (with C++11 support);
  # use the previously installed clang version (since installing one tends to remove another).
  -
    if [[ "${CXX}" == "clang++" ]]; then
      export CXX="clang++-$CLANG_VERSION";
    fi

  # Build and install a recent version of bison.
  - wget http://ftp.heanet.ie/mirrors/gnu/bison/bison-3.0.2.tar.gz
  - tar -xvzf bison-3.0.2.tar.gz
  - cd bison-3.0.2
  - ./configure && make && sudo make install
  - cd ..

before_script:
  - mkdir build
  - cd build

script:
  # Make sure we use the correct Clang binary.
  - cmake -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DCLANG_BINARY_NAME="clang-$CLANG_VERSION" -DCMAKE_INSTALL_PREFIX=./artifacts/locic -DSPHINX_OUTPUT_PDF=ON ..
  # Expect all tests to pass except those labelled 'EXPECT_FAIL'.
  - make && ctest --label-exclude EXPECT_FAIL --output-on-failure && ! ctest --label-regex EXPECT_FAIL
  - make install

after_success:
  - export LOCIC_ARTIFACTS_ARCHIVE="locic-artifacts-$TRAVIS_JOB_NUMBER-$TRAVIS_OS_NAME-$TRAVIS_BRANCH.tar.xz"
  - tar cfJ "$LOCIC_ARTIFACTS_ARCHIVE" -C ./artifacts locic
  - ../utils/upload_artifacts.py "$ARTIFACT_FTP_DOMAIN" "$ARTIFACT_FTP_USER" "$ARTIFACT_FTP_PASSWORD" "$LOCIC_ARTIFACTS_ARCHIVE"
  -
    if [ -n "$LOCIC_UPLOAD_DOCS" ]; then
      ../utils/upload_docs.py "$ARTIFACT_FTP_DOMAIN" "$ARTIFACT_FTP_USER" "$ARTIFACT_FTP_PASSWORD" "$TRAVIS_BRANCH" "./docs/html";
    fi

env:
  # Build with LLVM 3.3; use Clang 3.4 since Clang 3.3 can't build the exception runtime code.
  - BUILD_TYPE=Release LLVM_PACKAGE="llvm-3.3 llvm-3.3-dev" CLANG_VERSION="3.4"

  # Build with LLVM 3.4
  - BUILD_TYPE=Release LLVM_PACKAGE="llvm-3.4 llvm-3.4-dev" CLANG_VERSION="3.4"

  # Build with LLVM 3.5
  - BUILD_TYPE=Release LLVM_PACKAGE="llvm-3.5 llvm-3.5-dev" CLANG_VERSION="3.5"

  # Build with LLVM 3.6
  - BUILD_TYPE=Debug LLVM_PACKAGE="llvm-3.6 llvm-3.6-dev" CLANG_VERSION="3.6" LOCIC_UPLOAD_DOCS=1
  - BUILD_TYPE=Release LLVM_PACKAGE="llvm-3.6 llvm-3.6-dev" CLANG_VERSION="3.6"

  # Build with LLVM 3.7
  - BUILD_TYPE=Debug LLVM_PACKAGE="llvm-3.7 llvm-3.7-dev" CLANG_VERSION="3.7"
  - BUILD_TYPE=Release LLVM_PACKAGE="llvm-3.7 llvm-3.7-dev" CLANG_VERSION="3.7"

matrix:
  allow_failures:
  # Allow failures when using LLVM 3.7 since it's in development.
  - env: BUILD_TYPE=Debug LLVM_PACKAGE="llvm-3.7 llvm-3.7-dev" CLANG_VERSION="3.7"
  - env: BUILD_TYPE=Release LLVM_PACKAGE="llvm-3.7 llvm-3.7-dev" CLANG_VERSION="3.7"
