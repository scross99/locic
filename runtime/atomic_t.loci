interface atomic_incrementable_t {
	void atomic_increment();
}

template <typename T>
using atomic_incrementable = T : atomic_incrementable_t;

interface atomic_decrementable_t {
	void atomic_decrement();
}

template <typename T>
using atomic_decrementable = T : atomic_decrementable_t;

template <typename T>
require(movable<T>)
interface atomic_loadable_t {
	T atomic_load() const;
}

template <typename T>
require(movable<T>)
using atomic_loadable = movable<T> and T : atomic_loadable_t<T>;

template <typename T>
interface atomic_storable_t {
	void atomic_store(T value);
}

template <typename T>
using atomic_storable = T : atomic_storable_t<T>;

template <typename T>
__primitive atomic_t {
	static atomic_t<T> create(T value) noexcept require(movable<T>);
	
	T implicitcast() const require(atomic_loadable<T>);
	
	void assign(T value) require(atomic_storable<T>);
	
	void increment() require(atomic_incrementable<T>);
	void decrement() require(atomic_decrementable<T>);
}
