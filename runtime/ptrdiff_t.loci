__primitive ptrdiff_t {
	static ptrdiff_t unit() noexcept;
	
	static ptrdiff_t implicit_cast_int8_t(int8_t value) noexcept;
	static ptrdiff_t implicit_cast_int16_t(int16_t value) noexcept;
	static ptrdiff_t implicit_cast_byte_t(byte_t value) noexcept;
	static ptrdiff_t implicit_cast_short_t(short_t value) noexcept;
	
	static ptrdiff_t cast_size_t(size_t value) noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	ptrdiff_t implicit_copy() const noexcept;
	ptrdiff_t copy() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_ptrdiff_t<T> and movable<T>);
	
	template <typename T>
	T cast() const noexcept require(T : __cast_from_ptrdiff_t<T> and movable<T>);
	
	ptrdiff_t add(const ptrdiff_t& v) const noexcept;
	ptrdiff_t subtract(const ptrdiff_t& v) const noexcept;
	ptrdiff_t multiply(const ptrdiff_t& v) const noexcept;
	ptrdiff_t divide(const ptrdiff_t& v) const noexcept;
	ptrdiff_t modulo(const ptrdiff_t& v) const noexcept;
	
	bool equal(const ptrdiff_t& v) const noexcept;
	bool not_equal(const ptrdiff_t& v) const noexcept;
	bool less_than(const ptrdiff_t& v) const noexcept;
	bool less_than_or_equal(const ptrdiff_t& v) const noexcept;
	bool greater_than(const ptrdiff_t& v) const noexcept;
	bool greater_than_or_equal(const ptrdiff_t& v) const noexcept;
	
	compare_result_t compare(const ptrdiff_t& v) const noexcept;
	
	bool isZero() const noexcept;
	
	void __moveto(void* ptr, size_t position) noexcept;
	
	void increment() noexcept;
	void decrement() noexcept;
}

template <movable T>
interface __implicit_cast_from_ptrdiff_t {
	static T implicit_cast_ptrdiff_t(ptrdiff_t value) noexcept;
}

template <movable T>
interface __cast_from_ptrdiff_t {
	static T cast_ptrdiff_t(ptrdiff_t value) noexcept;
}

interface ptrdiff_hasher_t {
	void hash_ptrdiff(ptrdiff_t value) noexcept;
}

void ptrdiff_t::hash(ptrdiff_hasher_t& hasher) const noexcept {
	hasher.hash_ptrdiff(self);
}
