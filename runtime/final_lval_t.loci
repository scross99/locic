template <typename T>
notag(T)
__primitive final_lval_t {
	static final_lval_t<T> __dead() noexcept require(is_movable<T>);
	
	static size_t __alignmask() noexcept require(is_sized_type<T>);
	static size_t __sizeof() noexcept require(is_sized_type<T>);
	
	void __destroy() noexcept;
	
	final_lval_t<notag(T)> implicit_copy() const noexcept(is_noexcept_implicit_copyable<T>) require(is_movable<notag(T)> and is_implicit_copyable<T>);
	
	T* address() const noexcept;
	T& dissolve() const noexcept;
	
	bool __islive() const noexcept require(T : queryislive);
	void __setdead() noexcept require(T : deadstateable);
	
	void setvalue(T value) noexcept require(is_movable<T>);
	T extractvalue() noexcept require(is_movable<T>);
	void destroyvalue() noexcept;
	
	void __moveto(void* ptr, size_t position) noexcept require(is_movable<T>);
}
