template <typename T>
class range_t(T front, T back, bool empty) {
	static range_t<T> create(T begin, T end)
	noexcept(noexcept_decrementable<T> and noexcept_comparable<T>)
	require(movable<T> and decrementable<T> and comparable<T>) {
		if (begin < end) {
			end--;
			return @(move begin, move end, false);
		} else {
			return @(move begin, move end, true);
		}
	}
	
	static range_t<T> inclusive(T begin, T end)
	noexcept(noexcept_comparable<T>)
	require(movable<T> and comparable<T>) {
		if (begin <= end) {
			return @(move begin, move end, false);
		} else {
			return @(move begin, move end, true);
		}
	}
	
	implicit_copy = default;
	copy = default;
	
	const T& front() const noexcept {
		assert !self.empty();
		return @front;
	}
	
	void skip_front() noexcept(noexcept_incrementable<T> and noexcept_comparable<T>)
	require(incrementable<T> and comparable<T>) {
		assert !self.empty();
		
		// Check if front and back are equal before incrementing,
		// otherwise we could advance beyond the range.
		if (@front == @back) {
			@empty = true;
			return;
		}
		
		@front++;
	}
	
	const T& back() const noexcept {
		assert !self.empty();
		return @back;
	}
	
	void skip_back() noexcept(noexcept_decrementable<T> and noexcept_comparable<T>)
	require(decrementable<T> and comparable<T>) {
		assert !self.empty();
		
		// Check if front and back are equal before decrementing,
		// otherwise we could advance beyond the range.
		if (@front == @back) {
			@empty = true;
			return;
		}
		
		@back--;
	}
	
	bool empty() const noexcept {
		return @empty;
	}
}

template <movable T>
range_t<T> range(T begin, T end)
		noexcept(noexcept_decrementable<T> and noexcept_comparable<T>)
		require(movable<T> and decrementable<T> and comparable<T>) {
	return range_t<T>(move begin, move end);
}

template <movable T>
range_t<T> range_incl(T begin, T end)
		noexcept(noexcept_comparable<T>)
		require(movable<T> and comparable<T>) {
	return range_t<T>.inclusive(move begin, move end);
}
