template <typename T>
require(movable<notag(T)>)
interface copyable_t {
	notag(T) copy() const;
}

template <typename T>
require(movable<notag(T)>)
using copyable = movable<notag(T)> and T : copyable_t<T>;

template <typename T>
require(movable<notag(T)>)
interface implicit_copyable_t {
	notag(T) implicit_copy() const;
}

template <typename T>
require(movable<notag(T)>)
using implicit_copyable = movable<notag(T)> and T : implicit_copyable_t<T>;

template <typename T>
require(movable<notag(T)>)
interface noexcept_copyable_t {
	notag(T) copy() const noexcept;
}

template <typename T>
require(movable<notag(T)>)
using noexcept_copyable = movable<notag(T)> and T : noexcept_copyable_t<T>;

template <typename T>
require(movable<notag(T)>)
interface noexcept_implicit_copyable_t {
	notag(T) implicit_copy() const noexcept;
}

template <typename T>
require(movable<notag(T)>)
using noexcept_implicit_copyable = movable<notag(T)> and T : noexcept_implicit_copyable_t<T>;
