
// TODO: implement variadic templates!

template <bool IsNoExcept, sized_type ReturnType>
__primitive interfacemethod0_t {
	static interfacemethod0_t<IsNoExcept, ReturnType> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	interfacemethod0_t<IsNoExcept, ReturnType> __move() noexcept;
	
	interfacemethod0_t<IsNoExcept, ReturnType> implicit_copy() const noexcept;
	interfacemethod0_t<IsNoExcept, ReturnType> copy() const noexcept;
	
	compare_result_t compare(const interfacemethod0_t<IsNoExcept, ReturnType>& value) const noexcept;
	
	ReturnType call() const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0>
__primitive interfacemethod1_t {
	static interfacemethod1_t<IsNoExcept, ReturnType, Arg0> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	interfacemethod1_t<IsNoExcept, ReturnType, Arg0> __move() noexcept;
	
	interfacemethod1_t<IsNoExcept, ReturnType, Arg0> implicit_copy() const noexcept;
	interfacemethod1_t<IsNoExcept, ReturnType, Arg0> copy() const noexcept;
	
	compare_result_t compare(const interfacemethod1_t<IsNoExcept, ReturnType, Arg0>& value) const noexcept;
	
	ReturnType call(Arg0 arg0) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1>
__primitive interfacemethod2_t {
	static interfacemethod2_t<IsNoExcept, ReturnType, Arg0, Arg1> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	interfacemethod2_t<IsNoExcept, ReturnType, Arg0, Arg1> __move() noexcept;
	
	interfacemethod2_t<IsNoExcept, ReturnType, Arg0, Arg1> implicit_copy() const noexcept;
	interfacemethod2_t<IsNoExcept, ReturnType, Arg0, Arg1> copy() const noexcept;
	
	compare_result_t compare(const interfacemethod2_t<IsNoExcept, ReturnType, Arg0, Arg1>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2>
__primitive interfacemethod3_t {
	static interfacemethod3_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	interfacemethod3_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> __move() noexcept;
	
	interfacemethod3_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> implicit_copy() const noexcept;
	interfacemethod3_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> copy() const noexcept;
	
	compare_result_t compare(const interfacemethod3_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
__primitive interfacemethod4_t {
	static interfacemethod4_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	interfacemethod4_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> __move() noexcept;
	
	interfacemethod4_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> implicit_copy() const noexcept;
	interfacemethod4_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> copy() const noexcept;
	
	compare_result_t compare(const interfacemethod4_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
__primitive interfacemethod5_t {
	static interfacemethod5_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	interfacemethod5_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> __move() noexcept;
	
	interfacemethod5_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> implicit_copy() const noexcept;
	interfacemethod5_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> copy() const noexcept;
	
	compare_result_t compare(const interfacemethod5_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
__primitive interfacemethod6_t {
	static interfacemethod6_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	interfacemethod6_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> __move() noexcept;
	
	interfacemethod6_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> implicit_copy() const noexcept;
	interfacemethod6_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> copy() const noexcept;
	
	compare_result_t compare(const interfacemethod6_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
__primitive interfacemethod7_t {
	static interfacemethod7_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	interfacemethod7_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> __move() noexcept;
	
	interfacemethod7_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> implicit_copy() const noexcept;
	interfacemethod7_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> copy() const noexcept;
	
	compare_result_t compare(const interfacemethod7_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
__primitive interfacemethod8_t {
	static interfacemethod8_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	interfacemethod8_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> __move() noexcept;
	
	interfacemethod8_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> implicit_copy() const noexcept;
	interfacemethod8_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> copy() const noexcept;
	
	compare_result_t compare(const interfacemethod8_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7) const noexcept(IsNoExcept);
}
