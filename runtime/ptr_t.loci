template <typename T>
__primitive ptr_t {
	static ptr_t<T> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	// FIXME: This needs to use const-passthrough once we have virtual templates.
	ptr_t<T> implicit_copy() const noexcept;
	ptr_t<T> copy() const noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	
	selfconst(T)& deref() const noexcept;
	
	selfconst(T)& index(size_t index) const noexcept require(sized_type<T>);
	
	ptr_t<selfconst(T)> add(const ptrdiff_t& v) const noexcept require(sized_type<T>);
	
	ptrdiff_t subtract(const ptr_t<T>& v) const noexcept require(sized_type<T>);
	
	bool equal(const ptr_t<T>& value) const noexcept;
	bool not_equal(const ptr_t<T>& value) const noexcept;
	bool less_than(const ptr_t<T>& v) const noexcept;
	bool less_than_or_equal(const ptr_t<T>& v) const noexcept;
	bool greater_than(const ptr_t<T>& v) const noexcept;
	bool greater_than_or_equal(const ptr_t<T>& v) const noexcept;
	
	void increment() noexcept require(sized_type<T>);
	void decrement() noexcept require(sized_type<T>);
	
	compare_result_t compare(const ptr_t<T>& value) const noexcept;
	
	ptr_t<T> __move() noexcept;
}
