__primitive ulong_t {
	static ulong_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static ulong_t implicit_cast_uint16_t(uint16_t value) noexcept;
	static ulong_t implicit_cast_uint32_t(uint32_t value) noexcept;
	static ulong_t implicit_cast_ushort_t(ushort_t value) noexcept;
	static ulong_t implicit_cast_uint_t(uint_t value) noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	ulong_t implicit_copy() const noexcept;
	ulong_t copy() const noexcept;
	
	void __set_dead() noexcept;
	bool __is_live() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_ulong_t<T> and T : movable);
	
	template <typename T>
	T cast() const noexcept require(T : __cast_from_ulong_t<T> and T : movable);
	
	ulong_t add(const ulong_t& v) const noexcept;
	ulong_t subtract(const ulong_t& v) const noexcept;
	ulong_t multiply(const ulong_t& v) const noexcept;
	ulong_t divide(const ulong_t& v) const noexcept;
	ulong_t modulo(const ulong_t& v) const noexcept;
	
	bool equal(const ulong_t& v) const noexcept;
	bool not_equal(const ulong_t& v) const noexcept;
	bool less_than(const ulong_t& v) const noexcept;
	bool less_than_or_equal(const ulong_t& v) const noexcept;
	bool greater_than(const ulong_t& v) const noexcept;
	bool greater_than_or_equal(const ulong_t& v) const noexcept;
	
	compare_result_t compare(const ulong_t& v) const noexcept;
	
	bool isZero() const noexcept;
	
	void __move_to(void* ptr, size_t position) noexcept;
}

template <typename T : movable>
interface __implicit_cast_from_ulong_t {
	static T implicit_cast_ulong_t(ulong_t value) noexcept;
}

template <typename T : movable>
interface __cast_from_ulong_t {
	static T cast_ulong_t(ulong_t value) noexcept;
}
