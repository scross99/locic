
// TODO: implement variadic templates!

template <bool IsNoExcept, sized_type ReturnType>
__primitive function0_ptr_t {
	static function0_ptr_t<IsNoExcept, ReturnType> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	function0_ptr_t<IsNoExcept, ReturnType>  __move() noexcept;
	
	function0_ptr_t<IsNoExcept, ReturnType> implicit_copy() const noexcept;
	function0_ptr_t<IsNoExcept, ReturnType> copy() const noexcept;
	
	compare_result_t compare(const function0_ptr_t<IsNoExcept, ReturnType>& value) const noexcept;
	
	ReturnType call() const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0>
__primitive function1_ptr_t {
	static function1_ptr_t<IsNoExcept, ReturnType, Arg0> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	function1_ptr_t<IsNoExcept, ReturnType, Arg0>  __move() noexcept;
	
	function1_ptr_t<IsNoExcept, ReturnType, Arg0> implicit_copy() const noexcept;
	function1_ptr_t<IsNoExcept, ReturnType, Arg0> copy() const noexcept;
	
	compare_result_t compare(const function1_ptr_t<IsNoExcept, ReturnType, Arg0>& value) const noexcept;
	
	ReturnType call(Arg0 arg0) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1>
__primitive function2_ptr_t {
	static function2_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	function2_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1>  __move() noexcept;
	
	function2_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1> implicit_copy() const noexcept;
	function2_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1> copy() const noexcept;
	
	compare_result_t compare(const function2_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2>
__primitive function3_ptr_t {
	static function3_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	function3_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2>  __move() noexcept;
	
	function3_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> implicit_copy() const noexcept;
	function3_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> copy() const noexcept;
	
	compare_result_t compare(const function3_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
__primitive function4_ptr_t {
	static function4_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	function4_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3>  __move() noexcept;
	
	function4_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> implicit_copy() const noexcept;
	function4_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> copy() const noexcept;
	
	compare_result_t compare(const function4_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
__primitive function5_ptr_t {
	static function5_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	function5_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4>  __move() noexcept;
	
	function5_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> implicit_copy() const noexcept;
	function5_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> copy() const noexcept;
	
	compare_result_t compare(const function5_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
__primitive function6_ptr_t {
	static function6_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	function6_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>  __move() noexcept;
	
	function6_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> implicit_copy() const noexcept;
	function6_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> copy() const noexcept;
	
	compare_result_t compare(const function6_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
__primitive function7_ptr_t {
	static function7_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	function7_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>  __move() noexcept;
	
	function7_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> implicit_copy() const noexcept;
	function7_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> copy() const noexcept;
	
	compare_result_t compare(const function7_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, sized_type ReturnType, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
__primitive function8_ptr_t {
	static function8_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	function8_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>  __move() noexcept;
	
	function8_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> implicit_copy() const noexcept;
	function8_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> copy() const noexcept;
	
	compare_result_t compare(const function8_ptr_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7) const noexcept(IsNoExcept);
}
