template <typename T>
interface comparable_t {
	compare_result_t compare(const T& other) const;
}

template <typename T>
using comparable = T : comparable_t<T>;

template <typename T>
interface noexcept_comparable_t {
	compare_result_t compare(const T& other) const noexcept;
}

template <typename T>
using noexcept_comparable = T : noexcept_comparable_t<T>;

template <typename T>
interface lessthancomparable_t {
	bool less_than(const T& v) const;
}

template <typename T>
using lessthancomparable = T : lessthancomparable_t<T>;

template <typename T>
interface noexcept_lessthancomparable_t {
	bool less_than(const T& v) const noexcept;
}

template <typename T>
using noexcept_lessthancomparable = T : noexcept_lessthancomparable_t<T>;
