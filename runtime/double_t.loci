__primitive double_t {
	static double_t cast_byte_t(byte_t value) noexcept;
	static double_t cast_uint8_t(uint8_t value) noexcept;
	static double_t cast_short_t(short_t value) noexcept;
	static double_t cast_ushort_t(ushort_t value) noexcept;
	static double_t cast_int_t(int_t value) noexcept;
	static double_t cast_uint_t(uint_t value) noexcept;
	static double_t cast_long_t(long_t value) noexcept;
	static double_t cast_ulong_t(ulong_t value) noexcept;
	static double_t cast_longlong_t(longlong_t value) noexcept;
	static double_t cast_ulonglong_t(ulonglong_t value) noexcept;
	static double_t cast_ssize_t(ssize_t value) noexcept;
	static double_t cast_size_t(size_t value) noexcept;
	
	static double_t cast_float_t(float_t value) noexcept;
	static double_t implicit_cast_float_t(float_t value) noexcept;
	
	static double_t cast_longdouble_t(longdouble_t value) noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	double_t implicit_copy() const noexcept;
	double_t copy() const noexcept;
	
	void __destroy() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_double_t<T> and movable<T>);
	
	template <typename T>
	T cast() const noexcept require(T : __cast_from_double_t<T> and movable<T>);
	
	double_t plus() const noexcept;
	double_t minus() const noexcept;
	
	double_t abs() const noexcept;
	double_t sqrt() const noexcept;

	double_t add(const double_t& v) const noexcept;
	double_t subtract(const double_t& v) const noexcept;
	double_t multiply(const double_t& v) const noexcept;
	double_t divide(const double_t& v) const noexcept;
	double_t modulo(const double_t& v) const noexcept;
	
	bool equal(const double_t& v) const noexcept;
	bool not_equal(const double_t& v) const noexcept;
	bool less_than(const double_t& v) const noexcept;
	bool less_than_or_equal(const double_t& v) const noexcept;
	bool greater_than(const double_t& v) const noexcept;
	bool greater_than_or_equal(const double_t& v) const noexcept;
	
	compare_result_t compare(const double_t& v) const noexcept;
	
	double_t __move() noexcept;
}

template <movable T>
interface __implicit_cast_from_double_t {
	static T implicit_cast_double_t(double_t value) noexcept;
}

template <movable T>
interface __cast_from_double_t {
	static T cast_double_t(double_t value) noexcept;
}

interface double_hasher_t {
	void hash_double(double_t value) noexcept;
}

void double_t::hash(double_hasher_t& hasher) const noexcept {
	hasher.hash_double(self);
}
