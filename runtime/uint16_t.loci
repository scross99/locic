__primitive uint16_t {
	static uint16_t zero() noexcept;
	static uint16_t leading_ones(size_t count) noexcept;
	static uint16_t trailing_ones(size_t count) noexcept;
	
	static uint16_t implicit_cast_uint8_t(uint8_t value) noexcept;
	
	static uint16_t cast_uint8_t(uint8_t value) noexcept;
	static uint16_t cast_uint32_t(uint32_t value) noexcept;
	static uint16_t cast_uint64_t(uint64_t value) noexcept;
	
	static uint16_t cast_ushort_t(ushort_t value) noexcept;
	static uint16_t cast_uint_t(uint_t value) noexcept;
	static uint16_t cast_ulong_t(ulong_t value) noexcept;
	static uint16_t cast_ulonglong_t(ulonglong_t value) noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	uint16_t implicit_copy() const noexcept;
	uint16_t copy() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_uint16_t<T> and movable<T>);
	
	template <typename T>
	T cast() const noexcept require(T : __cast_from_uint16_t<T> and movable<T>);

	uint16_t add(const uint16_t& v) const noexcept;
	uint16_t subtract(const uint16_t& v) const noexcept;
	uint16_t multiply(const uint16_t& v) const noexcept;
	uint16_t divide(const uint16_t& v) const noexcept;
	uint16_t modulo(const uint16_t& v) const noexcept;
	
	bool equal(const uint16_t& v) const noexcept;
	bool not_equal(const uint16_t& v) const noexcept;
	bool less_than(const uint16_t& v) const noexcept;
	bool less_than_or_equal(const uint16_t& v) const noexcept;
	bool greater_than(const uint16_t& v) const noexcept;
	bool greater_than_or_equal(const uint16_t& v) const noexcept;
	
	compare_result_t compare(const uint16_t& v) const noexcept;
	bool isZero() const noexcept;
	
	uint16_t __move() noexcept;
	
	void increment() noexcept;
	void decrement() noexcept;
}

template <movable T>
interface __implicit_cast_from_uint16_t {
	static T implicit_cast_uint16_t(uint16_t value) noexcept;
}

template <movable T>
interface __cast_from_uint16_t {
	static T cast_uint16_t(uint16_t value) noexcept;
}

interface uint16_hasher_t {
	void hash_uint16(uint16_t value) noexcept;
}

void uint16_t::hash(uint16_hasher_t& hasher) const noexcept {
	hasher.hash_uint16(self);
}
