template <typename T>
__primitive __ptr {
	static __ptr<T> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	// FIXME: This needs to use const-passthrough once we have virtual templates.
	__ptr<T> implicit_copy() const noexcept;
	__ptr<T> copy() const noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	
	template <bool IsConst>
	lval<const<IsConst>(T)> ptr_lval<const<IsConst>(T)> deref() const(IsConst) noexcept;
	
	template <bool IsConst>
	lval<const<IsConst>(T)> ptr_lval<const<IsConst>(T)> index(size_t index) const(IsConst) noexcept require(T : sized_type);
	
	template <bool IsConst>
	__ptr<const<IsConst>(T)> add(const ptrdiff_t& v) const(IsConst) noexcept require(T : sized_type);
	
	ptrdiff_t subtract(const __ptr<T>& v) const noexcept require(T : sized_type);
	
	bool equal(const __ptr<T>& value) const noexcept;
	bool not_equal(const __ptr<T>& value) const noexcept;
	bool less_than(const __ptr<T>& v) const noexcept;
	bool less_than_or_equal(const __ptr<T>& v) const noexcept;
	bool greater_than(const __ptr<T>& v) const noexcept;
	bool greater_than_or_equal(const __ptr<T>& v) const noexcept;
	
	void increment() noexcept require(T : sized_type);
	void decrement() noexcept require(T : sized_type);
	
	compare_result_t compare(const __ptr<T>& value) const noexcept;
	
	void __moveto(void* ptr, size_t position) noexcept;
}
