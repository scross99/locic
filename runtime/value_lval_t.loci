interface deadstateable {
	void __setdead() noexcept;
}

interface queryislive {
	bool __islive() const noexcept;
}

template <typename T>
notag(T)
__primitive value_lval_t {
	static value_lval_t<T> __dead() noexcept require(T : deadstateable and is_movable<T>);
	
	static value_lval_t<T> create(T value) noexcept require(is_movable<T>);
	
	static size_t __alignmask() noexcept require(is_sized_type<T>);
	static size_t __sizeof() noexcept require(is_sized_type<T>);
	
	void __destroy() noexcept;
	
	value_lval_t<notag(T)> implicit_copy() const noexcept(is_noexcept_implicit_copyable<T>) require(is_movable<notag(T)> and is_implicit_copyable<T>);
	
	template <bool IsConst>
	const<IsConst>(T)* address() const(IsConst) noexcept;
	
	void assign(T value) noexcept require(is_movable<T>);
	
	template <bool IsConst>
	const<IsConst>(T)& dissolve() const(IsConst) noexcept;
	
	bool __islive() const noexcept require(T : queryislive);
	void __setdead() noexcept require(T : deadstateable);
	
	T move() noexcept require(is_movable<T>);
	
	void setvalue(T value) noexcept require(is_movable<T>);
	T extractvalue() noexcept require(is_movable<T>);
	void destroyvalue() noexcept;
	
	void __moveto(void* ptr, size_t position) noexcept require(is_movable<T>);
}
