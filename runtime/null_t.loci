__primitive null_t {
	static null_t create() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	null_t implicit_copy() const noexcept;
	null_t copy() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_null_t<T> and is_movable<T>);
	
	void __moveto(void* ptr, size_t position) noexcept;
}

template <typename T : movable>
interface __implicit_cast_from_null_t {
	static T null() noexcept;
}

template <typename T : movable>
interface nullable_t {
	static T null() noexcept;
}

template <typename T>
require(is_movable<T>)
using is_nullable = is_movable<T> and T : nullable_t<T>;
