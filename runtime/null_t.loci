__primitive null_t {
	static null_t create() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __destroy() noexcept;
	
	null_t implicit_copy() const noexcept;
	null_t copy() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_null_t<T>);
	
	null_t __move() noexcept;
}

template <typename T>
interface __implicit_cast_from_null_t {
	static T null() noexcept;
}

template <typename T>
interface nullable_t {
	static T null() noexcept;
}

template <typename T>
using nullable = T : nullable_t<T>;

interface null_hasher_t {
	void hash_null(null_t value) noexcept;
}

void null_t::hash(null_hasher_t& hasher) const noexcept {
	hasher.hash_null(self);
}
