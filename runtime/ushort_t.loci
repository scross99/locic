__primitive ushort_t {
	static ushort_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static ushort_t implicit_cast_uint16_t(uint16_t value) noexcept;
	
	static ushort_t cast_uint8_t(uint8_t value) noexcept;
	static ushort_t cast_uint16_t(uint16_t value) noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	ushort_t implicit_copy() const noexcept;
	ushort_t copy() const noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_ushort_t<T> and T : movable);
	
	template <typename T>
	T cast() const noexcept require(T : __cast_from_ushort_t<T> and T : movable);
	
	ushort_t add(const ushort_t& v) const noexcept;
	ushort_t subtract(const ushort_t& v) const noexcept;
	ushort_t multiply(const ushort_t& v) const noexcept;
	ushort_t divide(const ushort_t& v) const noexcept;
	ushort_t modulo(const ushort_t& v) const noexcept;
	
	bool equal(const ushort_t& v) const noexcept;
	bool not_equal(const ushort_t& v) const noexcept;
	bool less_than(const ushort_t& v) const noexcept;
	bool less_than_or_equal(const ushort_t& v) const noexcept;
	bool greater_than(const ushort_t& v) const noexcept;
	bool greater_than_or_equal(const ushort_t& v) const noexcept;
	
	compare_result_t compare(const ushort_t& v) const noexcept;
	
	bool isZero() const noexcept;
	
	void __moveto(void* ptr, size_t position) noexcept;
	
	void increment() noexcept;
	void decrement() noexcept;
}

template <typename T : movable>
interface __implicit_cast_from_ushort_t {
	static T implicit_cast_ushort_t(ushort_t value) noexcept;
}

template <typename T : movable>
interface __cast_from_ushort_t {
	static T cast_ushort_t(ushort_t value) noexcept;
}
