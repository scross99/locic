__primitive longdouble_t {
	static longdouble_t cast_float_t(float_t value) noexcept;
	static longdouble_t implicit_cast_float_t(float_t value) noexcept;
	static longdouble_t cast_double_t(double_t value) noexcept;
	static longdouble_t implicit_cast_double_t(double_t value) noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	longdouble_t implicit_copy() const noexcept;
	longdouble_t copy() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_longdouble_t<T> and movable<T>);
	
	template <typename T>
	T cast() const noexcept require(T : __cast_from_longdouble_t<T> and movable<T>);
	
	longdouble_t plus() const noexcept;
	longdouble_t minus() const noexcept;
	
	longdouble_t abs() const noexcept;

	longdouble_t add(const longdouble_t& v) const noexcept;
	longdouble_t subtract(const longdouble_t& v) const noexcept;
	longdouble_t multiply(const longdouble_t& v) const noexcept;
	longdouble_t divide(const longdouble_t& v) const noexcept;
	longdouble_t modulo(const longdouble_t& v) const noexcept;
	
	bool equal(const longdouble_t& v) const noexcept;
	bool not_equal(const longdouble_t& v) const noexcept;
	bool less_than(const longdouble_t& v) const noexcept;
	bool less_than_or_equal(const longdouble_t& v) const noexcept;
	bool greater_than(const longdouble_t& v) const noexcept;
	bool greater_than_or_equal(const longdouble_t& v) const noexcept;
	
	compare_result_t compare(const longdouble_t& v) const noexcept;
	
	void __moveto(void* ptr, size_t position) noexcept;
}

template <typename T : movable_t>
interface __implicit_cast_from_longdouble_t {
	static T implicit_cast_longdouble_t(longdouble_t value) noexcept;
}

template <typename T : movable_t>
interface __cast_from_longdouble_t {
	static T cast_longdouble_t(longdouble_t value) noexcept;
}
