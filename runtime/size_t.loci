__primitive size_t {
	static size_t unit() noexcept;
	
	static size_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static size_t implicit_cast_uint16_t(uint16_t value) noexcept;
	
	static size_t implicit_cast_ushort_t(ushort_t value) noexcept;
	
	static size_t cast_uint8_t(uint8_t value) noexcept;
	static size_t cast_uint16_t(uint16_t value) noexcept;
	static size_t cast_uint32_t(uint32_t value) noexcept;
	static size_t cast_uint64_t(uint64_t value) noexcept;
	
	static size_t cast_ubyte_t(ubyte_t value) noexcept;
	static size_t cast_ushort_t(ushort_t value) noexcept;
	static size_t cast_uint_t(uint_t value) noexcept;
	static size_t cast_ulong_t(ulong_t value) noexcept;
	static size_t cast_ulonglong_t(ulonglong_t value) noexcept;
	
	static size_t cast_int_t(int_t value) noexcept;
	static size_t cast_float_t(float_t value) noexcept;
	static size_t cast_double_t(double_t value) noexcept;
	static size_t cast_longdouble_t(longdouble_t value) noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	size_t implicit_copy() const noexcept;
	size_t copy() const noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_size_t<T> and movable<T>);
	
	template <typename T>
	T cast() const noexcept require(T : __cast_from_size_t<T> and movable<T>);
	
	size_t add(const size_t& v) const noexcept;
	size_t subtract(const size_t& v) const noexcept;
	size_t multiply(const size_t& v) const noexcept;
	size_t divide(const size_t& v) const noexcept;
	size_t modulo(const size_t& v) const noexcept;
	
	bool equal(const size_t& v) const noexcept;
	bool not_equal(const size_t& v) const noexcept;
	bool less_than(const size_t& v) const noexcept;
	bool less_than_or_equal(const size_t& v) const noexcept;
	bool greater_than(const size_t& v) const noexcept;
	bool greater_than_or_equal(const size_t& v) const noexcept;
	
	compare_result_t compare(const size_t& v) const noexcept;
	
	bool isZero() const noexcept;
	
	ssize_t signed_value() const noexcept;
	
	size_t __move() noexcept;
	
	void increment() noexcept;
	void decrement() noexcept;
}

template <movable T>
interface __implicit_cast_from_size_t {
	static T implicit_cast_size_t(size_t value) noexcept;
}

template <movable T>
interface __cast_from_size_t {
	static T cast_size_t(size_t value) noexcept;
}

interface size_hasher_t {
	void hash_size(size_t value) noexcept;
}

void size_t::hash(size_hasher_t& hasher) const noexcept {
	hasher.hash_size(self);
}
