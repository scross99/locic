__primitive longlong_t {
	static longlong_t implicit_cast_int8_t(int8_t value) noexcept;
	static longlong_t implicit_cast_int16_t(int16_t value) noexcept;
	static longlong_t implicit_cast_int32_t(int32_t value) noexcept;
	static longlong_t implicit_cast_int64_t(int64_t value) noexcept;
	static longlong_t implicit_cast_byte_t(byte_t value) noexcept;
	static longlong_t implicit_cast_short_t(short_t value) noexcept;
	static longlong_t implicit_cast_int_t(int_t value) noexcept;
	static longlong_t implicit_cast_long_t(long_t value) noexcept;
	
	static longlong_t cast_int8_t(int8_t value) noexcept;
	static longlong_t cast_int16_t(int16_t value) noexcept;
	static longlong_t cast_int32_t(int32_t value) noexcept;
	static longlong_t cast_int64_t(int64_t value) noexcept;
	static longlong_t cast_byte_t(byte_t value) noexcept;
	static longlong_t cast_short_t(short_t value) noexcept;
	static longlong_t cast_int_t(int_t value) noexcept;
	static longlong_t cast_long_t(long_t value) noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	longlong_t implicit_copy() const noexcept;
	longlong_t copy() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_longlong_t<T> and T : movable);
	
	template <typename T>
	T cast() const noexcept require(T : __cast_from_longlong_t<T> and T : movable);
	
	longlong_t plus() const noexcept;
	longlong_t minus() const noexcept;
	
	longlong_t abs() const noexcept;

	longlong_t add(const longlong_t& v) const noexcept;
	longlong_t subtract(const longlong_t& v) const noexcept;
	longlong_t multiply(const longlong_t& v) const noexcept;
	longlong_t divide(const longlong_t& v) const noexcept;
	longlong_t modulo(const longlong_t& v) const noexcept;
	
	bool equal(const longlong_t& v) const noexcept;
	bool not_equal(const longlong_t& v) const noexcept;
	bool less_than(const longlong_t& v) const noexcept;
	bool less_than_or_equal(const longlong_t& v) const noexcept;
	bool greater_than(const longlong_t& v) const noexcept;
	bool greater_than_or_equal(const longlong_t& v) const noexcept;
	
	compare_result_t compare(const longlong_t& v) const noexcept;
	
	void __moveto(void* ptr, size_t position) noexcept;
	
	void increment() noexcept;
	void decrement() noexcept;
}

template <typename T : movable>
interface __implicit_cast_from_longlong_t {
	static T implicit_cast_longlong_t(longlong_t value) noexcept;
}

template <typename T : movable>
interface __cast_from_longlong_t {
	static T cast_longlong_t(longlong_t value) noexcept;
}
