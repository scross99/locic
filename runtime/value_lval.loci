interface deadstateable {
	void __setdead() noexcept;
}

interface queryislive {
	void __is_live() const noexcept;
}

template <typename T>
notag(T)
__primitive value_lval {
	static value_lval<T> __empty() noexcept require(T : deadstateable and T : movable);
	
	static value_lval<T> create(T value) noexcept require(T : movable);
	
	static size_t __alignmask() noexcept require(T : sized_type);
	static size_t __sizeof() noexcept require(T : sized_type);
	
	value_lval<notag(T)> implicit_copy() const noexcept(T : noexcept_implicit_copyable<T>) require(notag(T) : movable and T : implicit_copyable<T>);
	
	template <bool IsConst>
	const<IsConst>(T)* address() const(IsConst) noexcept;
	
	void assign(T value) noexcept require(T : movable);
	
	template <bool IsConst>
	const<IsConst>(T)& dissolve() const(IsConst) noexcept;
	
	bool __is_live() const noexcept require(T : queryislive);
	void __set_dead() noexcept require(T : deadstateable);
	
	T move() noexcept require(T : movable);
	
	void __set_value(T value) noexcept require(T : movable);
	T __extract_value() noexcept require(T : movable);
	void __destroy_value() noexcept;
	
	void __move_to(void* ptr, size_t position) noexcept require(T : movable);
}
