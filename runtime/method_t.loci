
// TODO: implement variadic templates!

template <bool IsNoExcept, typename ReturnType : movable>
notag(ReturnType)
__primitive method0_t {
	static method0_t<IsNoExcept, ReturnType> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	void __moveto(void* ptr, size_t position) noexcept;
	
	method0_t<IsNoExcept, ReturnType> implicit_copy() const noexcept;
	method0_t<IsNoExcept, ReturnType> copy() const noexcept;
	
	compare_result_t compare(const method0_t<IsNoExcept, ReturnType>& value) const noexcept;
	
	ReturnType call() const noexcept(IsNoExcept);
}

template <bool IsNoExcept, typename ReturnType : movable, typename Arg0>
notag(ReturnType)
__primitive method1_t {
	static method1_t<IsNoExcept, ReturnType, Arg0> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	void __moveto(void* ptr, size_t position) noexcept;
	
	method1_t<IsNoExcept, ReturnType, Arg0> implicit_copy() const noexcept;
	method1_t<IsNoExcept, ReturnType, Arg0> copy() const noexcept;
	
	compare_result_t compare(const method1_t<IsNoExcept, ReturnType, Arg0>& value) const noexcept;
	
	ReturnType call(Arg0 arg0) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, typename ReturnType : movable, typename Arg0, typename Arg1>
notag(ReturnType)
__primitive method2_t {
	static method2_t<IsNoExcept, ReturnType, Arg0, Arg1> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	void __moveto(void* ptr, size_t position) noexcept;
	
	method2_t<IsNoExcept, ReturnType, Arg0, Arg1> implicit_copy() const noexcept;
	method2_t<IsNoExcept, ReturnType, Arg0, Arg1> copy() const noexcept;
	
	compare_result_t compare(const method2_t<IsNoExcept, ReturnType, Arg0, Arg1>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, typename ReturnType : movable, typename Arg0, typename Arg1, typename Arg2>
notag(ReturnType)
__primitive method3_t {
	static method3_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	void __moveto(void* ptr, size_t position) noexcept;
	
	method3_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> implicit_copy() const noexcept;
	method3_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2> copy() const noexcept;
	
	compare_result_t compare(const method3_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, typename ReturnType : movable, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
notag(ReturnType)
__primitive method4_t {
	static method4_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	void __moveto(void* ptr, size_t position) noexcept;
	
	method4_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> implicit_copy() const noexcept;
	method4_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3> copy() const noexcept;
	
	compare_result_t compare(const method4_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, typename ReturnType : movable, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
notag(ReturnType)
__primitive method5_t {
	static method5_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	void __moveto(void* ptr, size_t position) noexcept;
	
	method5_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> implicit_copy() const noexcept;
	method5_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4> copy() const noexcept;
	
	compare_result_t compare(const method5_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, typename ReturnType : movable, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
notag(ReturnType)
__primitive method6_t {
	static method6_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	void __moveto(void* ptr, size_t position) noexcept;
	
	method6_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> implicit_copy() const noexcept;
	method6_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5> copy() const noexcept;
	
	compare_result_t compare(const method6_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, typename ReturnType : movable, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
notag(ReturnType)
__primitive method7_t {
	static method7_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	void __moveto(void* ptr, size_t position) noexcept;
	
	method7_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> implicit_copy() const noexcept;
	method7_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6> copy() const noexcept;
	
	compare_result_t compare(const method7_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6) const noexcept(IsNoExcept);
}

template <bool IsNoExcept, typename ReturnType : movable, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
notag(ReturnType)
__primitive method8_t {
	static method8_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> null() noexcept;
	
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	void __setdead() noexcept;
	bool __islive() const noexcept;
	void __moveto(void* ptr, size_t position) noexcept;
	
	method8_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> implicit_copy() const noexcept;
	method8_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7> copy() const noexcept;
	
	compare_result_t compare(const method8_t<IsNoExcept, ReturnType, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>& value) const noexcept;
	
	ReturnType call(Arg0 arg0, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7) const noexcept(IsNoExcept);
}
