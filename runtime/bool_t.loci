__primitive bool_t {
	static size_t __alignmask() noexcept;
	static size_t __sizeof() noexcept;
	
	bool_t implicit_copy() const noexcept;
	bool_t copy() const noexcept;
	
	void __setdead() noexcept;
	bool_t __islive() const noexcept;
	
	template <typename T>
	T implicit_cast() const noexcept require(T : __implicit_cast_from_bool_t<T> and movable<T>);
	
	template <typename T>
	T cast() const noexcept require(T : __cast_from_bool_t<T> and movable<T>);
	
	bool_t equal(const bool_t& v) const noexcept;
	bool_t not_equal(const bool_t& v) const noexcept;
	
	compare_result_t compare(const bool_t& v) const noexcept;
	
	bool_t not() const noexcept;
	
	void __moveto(void* ptr, size_t position) noexcept;
}

template <movable T>
interface __implicit_cast_from_bool_t {
	static T implicit_cast_bool_t(bool_t value) noexcept;
}

template <movable T>
interface __cast_from_bool_t {
	static T cast_bool_t(bool_t value) noexcept;
}

interface bool_hasher_t {
	void hash_bool(bool_t value) noexcept;
}

void bool_t::hash(bool_hasher_t& hasher) const noexcept {
	hasher.hash_bool(self);
}

