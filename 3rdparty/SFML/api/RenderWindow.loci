// Workaround for the fact locic doesn't
// yet support opaque types.
struct sfContextSettings { };
struct sfRenderWindow { };
struct sfRenderStates { };

import {
	
	sfRenderWindow* sfRenderWindow_create(sfVideoMode mode, const ubyte* title, int style, const sfContextSettings* settings) noexcept;
	
	void sfRenderWindow_destroy(sfRenderWindow* renderWindow) noexcept;
	
	void sfRenderWindow_clear(sfRenderWindow* renderWindow, sfColor color) noexcept;
	
	sfVector2i sfRenderWindow_getSize(const sfRenderWindow* renderWindow) noexcept;
	
	void sfRenderWindow_setFramerateLimit(sfRenderWindow* renderWindow, int limit) noexcept;
	
	void sfRenderWindow_setView(sfRenderWindow* renderWindow, const sfView* view) noexcept;
	
	const sfView* sfRenderWindow_getView(const sfRenderWindow* renderWindow) noexcept;
	
	sfVector2f sfRenderWindow_mapPixelToCoords(const sfRenderWindow* renderWindow, sfVector2i point, const sfView* view) noexcept;
	
	void sfRenderWindow_display(sfRenderWindow* renderWindow) noexcept;
	
	void sfRenderWindow_drawCircleShape(sfRenderWindow* renderWindow, const sfCircleShape* object, const sfRenderStates* states) noexcept;
	
	void sfRenderWindow_drawRectangleShape(sfRenderWindow* renderWindow, const sfRectangleShape* object, const sfRenderStates* states) noexcept;
	
	void sfRenderWindow_drawText(sfRenderWindow* renderWindow, const sfText* object, const sfRenderStates* states) noexcept;
	
	uint8_t sfWindow_isOpen(const sfRenderWindow* window) noexcept;
	
	uint8_t sfWindow_pollEvent(sfRenderWindow* window, sfEvent* event) noexcept;
	
	void sfWindow_setVisible(sfRenderWindow* window, uint8_t visible) noexcept;
	
	void sfWindow_close(sfRenderWindow* window) noexcept;
	
}

namespace sf {
	
	interface Drawable {
		void draw(RenderWindow& window) const;
	}
	
	class RenderWindow(sfRenderWindow* window) {
		static Create (VideoMode videoMode, const ubyte* title) {
			// TitleBar (1) + Resize (2) + Close (4)
			// (And 8 would give FullScreen...)
			int style = 7;
			
			return @(sfRenderWindow_create(sfVideoMode(videoMode.width, videoMode.height, videoMode.bitsPerPixel), title, style, null));
		}
		
		~ {
			sfRenderWindow_destroy(@window);
		}
		
		void __setdead() noexcept {
			@window = null;
		}
		
		bool __islive() const noexcept {
			return @window != null;
		}
		
		void setVisible(bool visible) {
			sfWindow_setVisible(@window, visible ? 1u : 0u);
		}
		
		bool isOpen() const {
			return sfWindow_isOpen(@window) != 0u;
		}
		
		void close() {
			sfWindow_close(@window);
		}
		
		Vector2i getSize() const {
			auto size = sfRenderWindow_getSize(@window);
			return Vector2i(size.x, size.y);
		}
		
		void setView(const View& view) {
			sfRenderWindow_setView(@window, view.raw());
		}
		
		Vector2f mapPixelToCoords(Vector2i position) const {
			auto pixelPosition = sfVector2i(position.x, position.y);
			auto view = sfRenderWindow_getView(@window);
			auto coordsPosition = sfRenderWindow_mapPixelToCoords(@window, pixelPosition, view);
			return Vector2f(coordsPosition.x, coordsPosition.y);
		}
		
		OptionalEvent pollEvent() {
			auto eventValue = sfEvent();
			if (sfWindow_pollEvent(@window, &eventValue) == 0u) {
				return OptionalEvent::None();
			}
			
			return OptionalEvent(translateEvent(&eventValue));
		}
		
		void clear(Color color) {
			sfRenderWindow_clear(@window, sfColor(color.r, color.g, color.b, color.a));
		}
		
		void setFramerateLimit(unsigned int limit) {
			sfRenderWindow_setFramerateLimit(@window, limit.signed_value());
		}
		
		void display() {
			sfRenderWindow_display(@window);
		}
		
		void draw(const Drawable& drawable) {
			drawable.draw(self);
		}
		
		void drawCircle(const CircleShape& shape) {
			sfRenderWindow_drawCircleShape(@window, shape.raw(), null);
		}
		
		void drawRectangle(const RectangleShape& shape) {
			sfRenderWindow_drawRectangleShape(@window, shape.raw(), null);
		}
		
		void drawText(const Text& text) {
			sfRenderWindow_drawText(@window, text.raw(), null);
		}
		
		const sfRenderWindow* windowPointer() const {
			return @window;
		}
	}
	
}


