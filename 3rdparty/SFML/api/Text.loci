// Workaround for the fact locic doesn't
// yet support opaque types.
struct sfText { };

import {
	
	sfText* sfText_create() noexcept;
	
	sfText* sfText_copy(const sfText* text) noexcept;
	
	void sfText_destroy(sfText* text) noexcept;
	
	void sfText_setPosition(sfText* text, sfVector2f position) noexcept;
	
	void sfText_setRotation(sfText* text, float angle) noexcept;
	
	void sfText_setColor(sfText* text, sfColor color) noexcept;
	
	void sfText_setCharacterSize(sfText* text, unsigned int size) noexcept;
	
	void sfText_setString(sfText* text, const ubyte* string) noexcept;
	
	void sfText_setOrigin(sfText* text, sfVector2f position) noexcept;
	
	void sfText_setFont(sfText* text, const sfFont* font) noexcept;
	
	sfFloatRect sfText_getLocalBounds(const sfText* text) noexcept;
	
	sfFloatRect sfText_getGlobalBounds(const sfText* text) noexcept;
	
}

namespace sf {
	
	class Text(sfText* text) {
		static Create () {
			return @(sfText_create());
		}
		
		Text copy() const {
			return @(sfText_copy(@text));
		}
		
		~ {
			sfText_destroy(@text);
		}
		
		void __setdead() noexcept {
			@text = null;
		}
		
		bool __islive() const noexcept {
			return @text != null;
		}
		
		const sfText* raw() const {
			return @text;
		}
		
		void setPosition(Vector2f position) {
			sfText_setPosition(@text, sfVector2f(position.x, position.y));
		}
		
		void setRotation(float rotation) {
			sfText_setRotation(@text, rotation);
		}
		
		void setColor(Color color) {
			sfText_setColor(@text, sfColor(color.r, color.g, color.b, color.a));
		}
		
		void setCharacterSize(unsigned int size) {
			sfText_setCharacterSize(@text, size);
		}
		
		void setString(const ubyte* string) {
			sfText_setString(@text, string);
		}
		
		void setOrigin(const Vector2f position) {
			sfText_setOrigin(@text, sfVector2f(position.x, position.y));
		}
		
		void setFont(const Font& font) {
			sfText_setFont(@text, font.raw());
		}
		
		FloatRect getLocalBounds() const {
			final auto rect = sfText_getLocalBounds(@text);
			return FloatRect(Vector2f(rect.left, rect.top), Vector2f(rect.width, rect.height));
		}
		
		FloatRect getGlobalBounds() const {
			final auto rect = sfText_getGlobalBounds(@text);
			return FloatRect(Vector2f(rect.left, rect.top), Vector2f(rect.width, rect.height));
		}
		
		void draw(RenderWindow& window) const {
			window.drawText(self);
		}
		
	}
	
}


