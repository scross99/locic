// Workaround for the fact locic doesn't
// yet support opaque types.
struct sfClock { };

import {
	
	sfClock* sfClock_create() noexcept;
	
	sfClock* sfClock_copy(const sfClock* clock) noexcept;
	
	void sfClock_destroy(sfClock* clock) noexcept;
	
	sfTime sfClock_getElapsedTime(const sfClock* clock) noexcept;
	
	sfTime sfClock_restart(sfClock* clock) noexcept;
	
	struct sfTime {
		int64_t microseconds;
	};
	
	float sfTime_asSeconds(sfTime time) noexcept;
	
	int32_t sfTime_asMilliseconds(sfTime time) noexcept;
	
	int64_t sfTime_asMicroseconds(sfTime time) noexcept;
	
}

namespace sf {
	
	class Clock(sfClock* clock) {
		static Create () {
			return @(sfClock_create());
		}
		
		Clock copy() const {
			return @(sfClock_copy(@clock));
		}
		
		~ {
			sfClock_destroy(@clock);
		}
		
		void __setdead() noexcept {
			@clock = null;
		}
		
		bool __islive() const noexcept {
			return @clock != null;
		}
		
		Time getElapsedTime() const {
			return Time(sfClock_getElapsedTime(@clock));
		}
		
		void restart() {
			unused_result sfClock_restart(@clock);
		}
	}
	
	class Time(sfTime time) {
		static Create = default;
		
		Time implicitCopy() const {
			return @(@time);
		}
		
		float asSeconds() const {
			return sfTime_asSeconds(@time);
		}
		
		int32_t asMilliseconds() const {
			return sfTime_asMilliseconds(@time);
		}
		
		int64_t asMicroseconds() const {
			return sfTime_asMicroseconds(@time);
		}
	}
	
}


