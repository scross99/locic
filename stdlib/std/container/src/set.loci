
export std.container 0.1.0 {
	
	namespace std {
		
		template <sized_type T>
		class set_range(varray_range<T> range) {
			static create = default;
			
			implicit_copy = default;
			
			selfconst(T)& front() const noexcept {
				return @range.front();
			}
			
			void skip_front() noexcept {
				@range.skip_front();
			}
			
			selfconst(T)& back() const noexcept {
				return @range.back();
			}
			
			void skip_back() noexcept {
				@range.skip_back();
			}
			
			bool empty() const noexcept {
				return @range.empty();
			}
		}
		
		/**
		 * \brief Set.
		 */
		template <typename T>
		require(sized_type<T>)
		// TODO: use a proper tree structure rather than an array!
		class set(std::varray<T> array) {
			static set<T> create() {
				return @(std::varray<T>());
			}
			
			bool empty() const noexcept {
				return @array.empty();
			}
			
			size_t size() const noexcept {
				return @array.size();
			}
			
			void clear() noexcept require(destructible<T>) {
				@array.clear();
			}
			
			selfconst(T)& index(const T& value) const noexcept require(noexcept_comparable<T>) {
				for (const auto i: range<size_t>(0, @array.size())) {
					if (@array[i] == value) {
						return *(&(@array[i]));
					}
				}
				unreachable;
			}
			
			void internal_sort() require(noexcept_comparable<T> and movable<T>) {
				// Bubble sort! TODO: fix this!
				for (const auto c: range<size_t>(0, @array.size())) {
					for (const auto i: range<size_t>(1, @array.size())) {
						if (@array[i] < @array[i - 1u]) {
							auto tmp = move @array[i];
							new(&@array[i]) move @array[i - 1u];
							new(&@array[i - 1u]) move tmp;
						}
					}
				}
			}
			
			void insert(T value) require(noexcept_comparable<T> and movable<T>) {
				for (const auto i: range<size_t>(0, @array.size())) {
					assert @array[i] != value;
				}
				@array.push_back(move value);
				self.internal_sort();
			}
			
			bool try_insert(T value) require(noexcept_comparable<T> and movable<T>) {
				for (const auto i: range<size_t>(0, @array.size())) {
					if (@array[i] == value) {
						return false;
					}
				}
				@array.push_back(move value);
				self.internal_sort();
				return true;
			}
			
			T& get_or_insert(const T& value) require(movable<T> and noexcept_comparable<T> and copyable<T> and default_constructible<T>) {
				for (const auto i: range<size_t>(0, @array.size())) {
					if (@array[i] == value) {
						return @array[i];
					}
				}
				@array.push_back(value.copy());
				self.internal_sort();
				return self[value];
			}
			
			void erase(const T& value) require(noexcept_comparable<T> and movable<T>) {
				auto array = std::varray<T>();
				for (const auto i: range<size_t>(0, @array.size())) {
					if (@array[i] != value) {
						array.push_back(move @array[i]);
					}
				}
				@array = move array;
			}
			
			set_range<selfconst(T)> all() const noexcept {
				return set_range<selfconst(T)>(@array.all());
			}
		}
		
	}
	
}

