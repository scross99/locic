
export std.container 0.1.0 {
	
	namespace std {
		
		class hasher(size_t value) {
			static create() noexcept {
				return @(0);
			}
			
			void hash_int(int value) noexcept {
				@value += value.cast<size_t>();
			}
			
			size_t get() const noexcept {
				return @value;
			}
		}
		
		interface hasher_api {
			void hash_int(int value) noexcept;
		}
		
		interface hashable_api {
			void hash(hasher_api& hasher) const noexcept;
		}
		
		template <typename T>
		require(T : hashable_api)
		class hash() {
			static create = default;
			
			size_t call(const T& object) const noexcept {
				auto h = hasher();
				object.hash(h);
				return h.get();
			}
		}
		
	}
	
}
