export std.container 0.1.0 {
	
	namespace std {
	
		/**
		 * \brief Resizable array.
		 */
		template <sized_type T>
		class varray(size_t size, size_t capacity, T* data) {
			static create() noexcept {
				return @(0u, 0u, null);
			}
			
			void __destroy() noexcept require(destructible<T>) {
				for (auto i: reversed<size_t, range_t<size_t>>(range<size_t>(0, @size))) {
					@data[i].__destroy();
				}
				
				release(reinterpret_cast<T*, void*>(@data));
			}
			
			// Prevent the creation of a liveness indicator.
			void __setdead() noexcept {
				@data = null;
			}
			
			bool __islive() const noexcept {
				return @data != null;
			}
			
			void reserve(size_t size) require (movable<T>) {
				if (size <= self.capacity()) {
					return;
				}
				
				T* newData = reinterpret_cast<void*, T*>(allocate(size * sizeof(T)));
				
				for (auto i: range<size_t>(0, @size)) {
					new(&newData[i]) move @data[i];
				}
				
				release(reinterpret_cast<T*, void*>(@data));
				
				@data = newData;
				@capacity = size;
			}
			
			size_t capacity() const noexcept {
				return @capacity;
			}
			
			void resize(size_t size, const T element) require(destructible<T> and movable<T> and copyable<T>) {
				self.reserve(size);
				if (size < self.size()) {
					for (auto i: reversed<size_t, range_t<size_t>>(range<size_t>(size, self.size()))) {
						@data[i].__destroy();
					}
				} else {
					for (auto i: range<size_t>(self.size(), size)) {
						new(&@data[i]) element.copy();
					}
				}
				@size = size;
			}
			
			bool empty() const noexcept {
				return @size == 0u;
			}
			
			selfconst(T)* data() const noexcept {
				return @data;
			}
			
			size_t size() const noexcept {
				return @size;
			}
			
			selfconst(T)& index(size_t index) const noexcept {
				assert index < @size;
				return @data[index];
			}
			
			void clear() noexcept require(destructible<T>) {
				for (auto i: reversed<size_t, range_t<size_t>>(range<size_t>(0, @size))) {
					@data[i].__destroy();
				}
				@size = 0u;
			}
			
			void push_back(T value) require (movable<T>) {
				self.reserve(@size + 1u);
				new(&@data[@size]) move value;
				@size++;
			}
			
			void pop_back() noexcept require(destructible<T>) {
				assert !self.empty();
				@size--;
				@data[@size].__destroy();
			}
			
			varray<T> copy() const require(movable<T> and copyable<T>) {
				auto array = varray<T>();
				array.reserve(@size);
				for (auto i: range<size_t>(0, @size)) {
					array.push_back(self[i].copy());
				}
				return move array;
			}
			
			varray_range<selfconst(T)> all() const noexcept {
				return varray_range<selfconst(T)>(@data, 0, @size);
			}
		}
		
		template <sized_type T>
		class varray_range(T* data, size_t begin, size_t end) {
			static create(T* data, size_t begin, size_t end) noexcept {
				return @(data, begin, end);
			}
			
			implicitCopy = default;
			
			bool empty() const noexcept {
				return @begin == @end;
			}
			
			void skip_front() noexcept {
				assert !self.empty();
				@begin += 1u;
			}
			
			selfconst(T)& front() const noexcept {
				assert !self.empty();
				return @data[@begin];
			}
			
			void skip_back() noexcept {
				assert !self.empty();
				@end -= 1u;
			}
			
			selfconst(T)& back() const noexcept {
				assert !self.empty();
				return @data[@end - 1u];
			}
		}
		
	}
	
}

