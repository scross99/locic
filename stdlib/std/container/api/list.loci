
import std.container 0.1.0 {
	
	namespace std {
	
		template <typename T, bool IsConst>
		class list_range {
			selfconst(const<IsConst>(T))& front() const;
			
			void skip_front();
			
			selfconst(const<IsConst>(T))& back() const;
			
			void skip_back();
			
			bool empty() const noexcept;
		}
		
		/**
		 * \brief Doubly-linked list.
		 */
		template <typename T>
		class list {
			static list<T> create();
			
			void __destroy() noexcept require(destructible<T>);
			
			bool empty() const noexcept;
			
			size_t size() const noexcept;
			
			void clear() noexcept require(destructible<T>);
			
			selfconst(T)& front() const;
			
			selfconst(T)& back() const;
			
			void push_front(T value) require(movable<T>);
			
			void pop_front() noexcept require(destructible<T>);
			
			void push_back(T value) require(movable<T>);
			
			void pop_back() noexcept require(destructible<T>);
			
			list_range<T, selfconst> all() const noexcept;
			
		}
		
	}
	
}

