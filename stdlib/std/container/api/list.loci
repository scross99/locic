
import std.container 0.1.0 {
	
	namespace std {
	
		template <typename T, bool IsListConst>
		class list_range {
			template <bool IsConst>
			lval ptr_lval_t<const<IsConst or IsListConst>(T)> front() const(IsConst);
			
			void skip_front();
			
			template <bool IsConst>
			lval ptr_lval_t<const<IsConst or IsListConst>(T)> back() const(IsConst);
			
			void skip_back();
			
			bool empty() const noexcept;
		}
		
		/**
		 * \brief Doubly-linked list.
		 */
		template <typename T>
		class list {
			static list<T> create();
			
			bool empty() const noexcept;
			
			size_t size() const noexcept;
			
			void clear() noexcept;
			
			template <bool IsConst>
			lval ptr_lval_t<const<IsConst>(T)> front() const(IsConst);
			
			template <bool IsConst>
			lval ptr_lval_t<const<IsConst>(T)> back() const(IsConst);
			
			void push_front(T value) require(movable<T>);
			
			void pop_front() noexcept;
			
			void push_back(T value) require(movable<T>);
			
			void pop_back() noexcept;
			
			template <bool IsConst>
			list_range<T, IsConst> all() const(IsConst) noexcept;
			
		}
		
	}
	
}

