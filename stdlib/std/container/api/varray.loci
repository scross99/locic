
import std.container 0.1.0 {
	
	namespace std {
	
		/**
		 * \brief Resizable array.
		 */
		template <sized_type T>
		notag(T)
		class varray {
			static varray<T> create() noexcept;
			void __destroy() noexcept require(destructible<T>);
			
			void reserve(size_t size);
			
			size_t capacity() const noexcept;
			
			void resize(size_t size, T element) require(destructible<T> and movable<T> and copyable<T>);
			
			bool empty() const noexcept;
			
			template <bool IsConst>
			const<IsConst>(T)* data() const(IsConst) noexcept;
			
			size_t size() const noexcept;
			
			template <bool IsConst>
			const<IsConst>(T)& index(size_t index) const(IsConst) noexcept;
			
			void clear() noexcept require(destructible<T>);
			
			void push_back(T value) require (movable<T>);
			
			void pop_back() noexcept require(destructible<T>);
			
			varray<notag(T)> copy() const require(movable<notag(T)> and copyable<T>);
			
			template <bool IsConst>
			varray_range<T, IsConst> all() const(IsConst) noexcept;
		}
		
		template <sized_type T, bool IsArrayConst>
		class varray_range {
			varray_range<T, IsArrayConst> implicitCopy() const noexcept;
			
			bool empty() const noexcept;
			
			void skip_front() noexcept;
			
			template <bool IsConst>
			const<IsConst or IsArrayConst>(T)& front() const(IsConst) noexcept;
			
			void skip_back() noexcept;
			
			template <bool IsConst>
			const<IsConst or IsArrayConst>(T)& back() const(IsConst) noexcept;
		}
		
	}
	
}

