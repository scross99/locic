
import std.container 0.1.0 {
	
	namespace std {
	
		/**
		 * \brief Set.
		 */
		template <typename T>
		require(T : sized_type)
		class set {
			static set<T> create();
			
			bool empty() const noexcept;
			
			size_t size() const noexcept;
			
			void clear() noexcept;
			
			template <bool IsConst>
			lval<const<IsConst>(T)> ptr_lval<const<IsConst>(T)> index(const T& value) const(IsConst) noexcept require(is_noexcept_comparable<T>);
			
			void insert(T value) require(is_movable<T> and is_noexcept_comparable<T>);
			
			bool try_insert(T value) require(is_movable<T> and is_noexcept_comparable<T>);
			
			T& get_or_insert(const T& value) require(is_movable<T> and is_noexcept_comparable<T> and is_copyable<T> and is_default_constructible<T>);
			
			void erase(const T& value) require(is_movable<T> and is_noexcept_comparable<T>);
			
			template <bool IsConst>
			set_range<T, IsConst> all() const(IsConst) noexcept;
		}
		
		template <typename T, bool IsSetConst>
		require(T : sized_type)
		class set_range {
			set_range<T, IsSetConst> implicit_copy() const noexcept;
			
			set_range<T, IsSetConst> copy() const noexcept;
			
			template <bool IsConst>
			lval<const<IsConst or IsSetConst>(T)> ptr_lval<const<IsConst or IsSetConst>(T)> front() const(IsConst);
			
			void skip_front();
			
			template <bool IsConst>
			lval<const<IsConst or IsSetConst>(T)> ptr_lval<const<IsConst or IsSetConst>(T)> back() const(IsConst);
			
			void skip_back();
			
			bool empty() const noexcept;
		}
		
	}
	
}

