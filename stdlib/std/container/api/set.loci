
import std.container 0.1.0 {
	
	namespace std {
	
		/**
		 * \brief Set.
		 */
		template <typename T>
		require(sized_type<T>)
		class set {
			static set<T> create();
			
			bool empty() const noexcept;
			
			size_t size() const noexcept;
			
			void clear() noexcept require(destructible<T>);
			
			selfconst(T)& index(const T& value) const noexcept require(noexcept_comparable<T>);
			
			void insert(T value) require(movable<T> and noexcept_comparable<T>);
			
			bool try_insert(T value) require(movable<T> and noexcept_comparable<T>);
			
			T& get_or_insert(const T& value) require(movable<T> and noexcept_comparable<T> and copyable<T> and default_constructible<T>);
			
			void erase(const T& value) require(movable<T> and noexcept_comparable<T>);
			
			set_range<selfconst(T)> all() const noexcept;
		}
		
		template <typename T>
		require(sized_type<T>)
		class set_range {
			set_range<T> implicit_copy() const noexcept;
			
			set_range<T> copy() const noexcept;
			
			selfconst(T)& front() const;
			
			void skip_front();
			
			selfconst(T)& back() const;
			
			void skip_back();
			
			bool empty() const noexcept;
		}
		
	}
	
}

