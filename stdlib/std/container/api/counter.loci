import std.container 0.1.0 {

	namespace std {
		
		template <typename T>
		require (movable<T>)
		interface counter_type {
			T implicit_copy() const noexcept;
			
			compare_result_t compare(const T& value) const noexcept;
			
			T add(const T& value) const noexcept;
		}
		
		template <typename T>
		require (movable<T>)
		using countable = movable<T> and T : counter_type<T>;
		
		template <typename T>
		require (countable<T>)
		class counter {
			static counter<T> create(T begin, T end, T increment) noexcept;
			
			const T& front() const noexcept;
			
			void skip_front() noexcept;
			
			bool empty() const noexcept;
		}
		
		template <typename T>
		require (countable<T>)
		class counter_incl {
			static counter_incl<T> create(T begin, T end, T increment) noexcept;
			
			const T& front() const noexcept;
			
			void skip_front() noexcept;
			
			bool empty() const noexcept;
		}
		
		template <typename T>
		require (movable<T>)
		interface reverse_counter_type {
			T implicit_copy() const noexcept;
			
			compare_result_t compare(const T& value) const noexcept;
			
			T subtract(const T& value) const noexcept;
		}
		
		template <typename T>
		require (movable<T>)
		using reverse_countable = movable<T> and T : reverse_counter_type<T>;
		
		template <typename T>
		require (reverse_countable<T>)
		class reverse_counter {
			static reverse_counter<T> create(T begin, T end, T decrement) noexcept;
			
			const T& front() const noexcept;
			
			void skip_front() noexcept;
			
			bool empty() const noexcept;
		}
		
		template <typename T>
		require (reverse_countable<T>)
		class reverse_counter_incl {
			static reverse_counter_incl<T> create(T begin, T end, T decrement) noexcept;
			
			const T& front() const noexcept;
			
			void skip_front() noexcept;
			
			bool empty() const noexcept;
		}
		
	}
	
}
		
		
