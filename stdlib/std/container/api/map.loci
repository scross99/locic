
import std.container 0.1.0 {
	
	namespace std {
		
		template <typename T0, typename T1>
		datatype pair(T0 first, T1 second);
		
		/**
		 * \brief Map.
		 */
		template <typename Key, typename Value>
		require(sized_type<Key> and sized_type<Value>)
		class map {
			static map<Key, Value> create();
			
			bool empty() const noexcept;
			
			size_t size() const noexcept;
			
			void clear() noexcept require(destructible<Key> and destructible<Value>);
			
			selfconst(Value)& index(const Key& key) const noexcept require(noexcept_comparable<Key>);
			
			void insert(pair<Key, Value> value) require(noexcept_comparable<Key> and movable<Key> and movable<Value>);
			
			bool try_insert(pair<Key, Value> value) require(noexcept_comparable<Key> and movable<Key> and movable<Value>);
			
			Value& get_or_insert(const Key& key) require(movable<Key> and noexcept_comparable<Key> and copyable<Key> and default_constructible<Value> and movable<Value>);
			
			void erase(const Key& key) require(noexcept_comparable<Key> and movable<Key> and movable<Value>);
			
			map_range<selfconst(pair<Key, Value>)> all() const noexcept;
		}
		
		template <sized_type Pair>
		class map_range {
			map_range<Pair> implicit_copy() const noexcept;
			
			map_range<Pair> copy() const noexcept;
			
			selfconst(Pair)& front() const noexcept;
			
			void skip_front() noexcept;
			
			selfconst(Pair)& back() const noexcept;
			
			void skip_back() noexcept;
			
			bool empty() const noexcept;
		}
		
	}
	
}

