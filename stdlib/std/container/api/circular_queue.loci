
import std.container 0.1.0 {
	
	namespace std {
	
		/**
		 * \brief Circular Queue
		 */
		template <sized_type T>
		class circular_queue {
			static circular_queue<T> create(size_t size);
			void __destroy() noexcept require(destructible<T>);
			
			bool empty() const noexcept;
			bool full() const noexcept;
			
			size_t size() const noexcept;
			size_t capacity() const noexcept;
			
			template <bool IsConst>
			const<IsConst>(T)& front() const(IsConst) noexcept;
			
			template <bool IsConst>
			const<IsConst>(T)& back() const(IsConst) noexcept;
			
			template <bool IsConst>
			const<IsConst>(T)& index(size_t index) const(IsConst) noexcept;
			
			void clear() noexcept require(destructible<T>);
			
			void push_back(T value) noexcept require(movable<T>);
			
			void pop_front() noexcept require(destructible<T>);
			
			template <bool IsConst>
			circular_queue_range<T, IsConst> all() const(IsConst) noexcept;
			
		}
		
		template <sized_type T, bool IsQueueConst>
		class circular_queue_range {
			circular_queue_range<T, IsQueueConst> implicit_copy() const noexcept;
			
			bool empty() const noexcept;
			
			void skip_front();
			
			template <bool IsConst>
			const<IsConst or IsQueueConst>(T)& front() const(IsConst) noexcept;
		}
		
	}
	
}

