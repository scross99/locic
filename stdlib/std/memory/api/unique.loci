import std.memory 0.1.0 {
	
	namespace std {
		
		template <typename T>
		class unique_ptr {
			static unique_ptr<T> create(T value) require(movable<T>);
			
			static unique_ptr<T> null() noexcept;
			
			void __destroy() noexcept require(destructible<T>);
			
			selfconst(T)& deref() const noexcept;
			
			selfconst(T)* get() const noexcept;
			
			void reset(T* pointer) noexcept require(destructible<T>);
			
			T* release() noexcept;
		}
		
		template <movable T>
		unique_ptr<T> new_unique(T value);
		
	}
	
}

