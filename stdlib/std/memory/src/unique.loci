export std.memory 0.1.0 {
	
	namespace std {
		
		template <typename T>
		class unique_ptr(T* ptr) {
			static create(T value) require(movable<T>) {
				return @(new_raw<T>(move value));
			}
			
			static null() noexcept {
				return @(null);
			}
			
			void __destroy() noexcept require(destructible<T>) {
				if (@ptr != null) {
					delete_raw<T>(@ptr);
				}
			}
			
			void __setdead() noexcept {
				@ptr = null;
			}
			
			bool __islive() const noexcept {
				// Always run destructor/move method, since
				// in the 'dead' case (i.e. pointers being null)
				// the destructor will just do nothing; this
				// avoids a liveness indicator byte being added
				// to the object.
				return true;
			}
			
			selfconst(T)& deref() const noexcept {
				return *@ptr;
			}
			
			selfconst(T)* get() const noexcept {
				return @ptr;
			}
			
			void reset(T* pointer) noexcept require(destructible<T>) {
				if (@ptr != null) {
					delete_raw<T>(@ptr);
				}
				@ptr = pointer;
			}
			
			T* release() noexcept {
				T* pointer = @ptr;
				@ptr = null;
				return pointer;
			}
		}
		
		template <movable T>
		unique_ptr<T> new_unique(T value) {
			return unique_ptr<T>(move value);
		}
		
	}
	
}

