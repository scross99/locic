export std.string 0.1.0 {
	
	namespace std {
		
		class string_iterator (const std::varray<ubyte>& stringData, size_t position) {
			static _fromPos(const std::varray<ubyte>& stringData, size_t position) noexcept {
				return @(stringData, position);
			}
			
			implicit_copy = default;
			
			copy = default;
			
			const std::varray<ubyte>& _stringData() const noexcept {
				return @stringData;
			}
			
			size_t _stringPos() const noexcept {
				return @position;
			}
			
			void decrement() noexcept {
				assert !self.is_begin();
				@position -= 1u;
			}
			
			void increment() noexcept {
				assert !self.is_end();
				@position += 1u;
			}
			
			lval string_lval deref() const {
				assert !self.is_end();
				return lval(string_lval(&@stringData[@position]));
			}
			
			compare_result_t compare(const string_iterator& other) const noexcept {
				assert @stringData.data() == other._stringData().data();
				return @position.compare(other._stringPos());
			}
			
			bool is_begin() const noexcept {
				return @position == 0u;
			}
			
			bool is_end() const noexcept {
				return @position == @stringData.size();
			}
		}
		
	}
	
}

