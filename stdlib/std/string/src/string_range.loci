export std.string 0.1.0 {
	
	namespace std {
		
		template <sized_type T>
		class ptr_range (T* ptr) {
			static create = default;
			
			bool empty() const noexcept {
				return false;
			}
			
			T front() const noexcept require(noexcept_implicit_copyable<T>) {
				return *@ptr;
			}
			
			void skip_front() noexcept {
				@ptr += 1;
			}
		}
		
		class string_range (const std::varray<ubyte>& stringData, size_t begin, size_t end) {
			static _string_all(const std::varray<ubyte>& stringData) {
				return @(stringData, 0u, stringData.size());
			}
			
			string_range iterator_pair(string_iterator begin, string_iterator end) {
				assert begin <= end;
				return @(begin._stringData(), begin._stringPos(), end._stringPos());
			}
			
			implicit_copy = default;
			
			copy = default;
			
			size_t _beginPos() const noexcept {
				return @begin;
			}
			
			size_t _endPos() const noexcept {
				return @end;
			}
			
			string_iterator begin() const {
				return string_iterator._fromPos(@stringData, @begin);
			}
			
			string_iterator end() const {
				return string_iterator._fromPos(@stringData, @end);
			}
			
			void skip_front() {
				assert !self.empty();
				@begin += 1u;
			}
			
			unichar front() const {
				assert !self.empty();
				auto ptrRange = ptr_range<const ubyte>(&@stringData[@begin]);
				return utf8_decode_character(ptrRange);
			}
			
			void skip_back() {
				assert !self.empty();
				@end -= 1u;
			}
			
			unichar back() const {
				assert !self.empty();
				auto ptrRange = ptr_range<const ubyte>(&@stringData[@end - 1u]);
				return utf8_decode_character(ptrRange);
			}
			
			bool empty() const {
				assert @begin <= @end;
				return @begin == @end;
			}
			
			size_t length() const {
				assert @begin <= @end;
				return @end - @begin;
			}
		}
		
	}
	
}

