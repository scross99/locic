import int sprintf(ubyte* str, const ubyte * format, ...) noexcept;
import size_t strlen(const ubyte * stringConstant) noexcept;

export std.string 0.1.0 {
	
	std::string string_literal(const ubyte* stringConstant) {
		return std::string::cstring(stringConstant);
	}
	
	namespace std {
		
		exception out_of_range();
		
		// TODO: use rope data structure.
		class string (size_t length, std::varray<ubyte> byteArray) {
			static create() {
				return string::cstring(C"");
			}
			
			static cstring(const ubyte * stringConstant) {
				// Work out number of bytes until NULL terminator.
				auto length = strlen(stringConstant);
				
				auto byteArray = std::varray<ubyte>();
				
				for (auto i: range<size_t>(0, length)) {
					byteArray.push_back(stringConstant[i]);
				}
				
				return @(length, move byteArray);
			}
			
			string implicit_copy() const {
				auto byteArray = std::varray<ubyte>();
				
				for (auto i: range<size_t>(0, @byteArray.size())) {
					byteArray.push_back(@byteArray[i]);
				}
				
				return @(@length, move byteArray);
			}
			
			string copy() const {
				return self.implicit_copy();
			}
			
			string add(const string& other) const {
				auto newLength = @length + other.length();
				auto byteArray = std::varray<ubyte>();
				
				for (auto i: range<size_t>(0, @length)) {
					byteArray.push_back(@byteArray[i]);
				}
				
				for (auto i: range<size_t>(0, other.length())) {
					byteArray.push_back(other._data()[i]);
				}
				
				return @(newLength, move byteArray);
			}
			
			string substr(string_range substrRange) const {
				auto byteArray = std::varray<ubyte>();
				
				for (auto i: range<size_t>(substrRange._beginPos(), substrRange._endPos())) {
					byteArray.push_back(@byteArray[i]);
				}
				
				byteArray.push_back(0u);
				
				return @(substrRange.length(), move byteArray);
			}
			
			string_range all() const {
				return string_range._string_all(@byteArray);
			}
			
			string_iterator begin() const {
				return self.all().begin();
			}
			
			string_iterator end() const {
				return self.all().end();
			}
			
			size_t length() const noexcept {
				return @length;
			}
			
			bool empty() const noexcept {
				return @length == 0u;
			}
			
			const ubyte* _data() const noexcept {
				return @byteArray.data();
			}
			
			compare_result_t compare(const string& other) const noexcept {
				size_t minLength = @length < other.length() ? @length : other.length();
				size_t maxLength = @length > other.length() ? @length : other.length();
				
				size_t i = 0u;
				while (i < maxLength) {
					if (i >= minLength) {
						return @length.compare(other.length());
					}
					
					ubyte a = self._data()[i];
					ubyte b = other._data()[i];
					if (a != b) {
						if (a < b) {
							return compare_result_t.less_than();
						} else {
							return compare_result_t.greater_than();
						}
					}
					
					i += 1u;
				}
				
				return compare_result_t.equal();
			}
			
			string join(input_range<const string&>& range) const {
				string joinedString = "";
				bool isFirst = true;
				for (const auto& stringValue: range) {
					if (isFirst) {
						isFirst = false;
					} else {
						joinedString += self;
					}
					joinedString += stringValue;
				}
				return joinedString;
			}
			
			utf8_buffer make_buffer() const {
				auto buffer = utf8_buffer();
				for (auto i: range<size_t>(0, @byteArray.size())) {
					buffer.append(@byteArray[i]);
				}
				return move buffer;
			}
			
			void serialize(string_builder& builder) const {
				for (const auto char: self.all()) {
					builder.append_char(char);
				}
			}
		}
		
		std::string uint8_t::to_string() const {
			return serialize(self);
		}
		
		std::string uint16_t::to_string() const {
			return serialize(self);
		}
		
		std::string uint32_t::to_string() const {
			return serialize(self);
		}
		
		std::string uint64_t::to_string() const {
			return serialize(self);
		}
		
		std::string ushort_t::to_string() const {
			return serialize(self);
		}
		
		std::string uint_t::to_string() const {
			return serialize(self);
		}
		
		std::string ulong_t::to_string() const {
			return serialize(self);
		}
		
		std::string ulonglong_t::to_string() const {
			return serialize(self);
		}
		
		std::string serialize(ulonglong_t value) {
			auto bytes = std::varray<ubyte>();
			bytes.resize(10u, 0u);
			unused_result sprintf(bytes.data(), C"%llu", value);
			return std::string.cstring(bytes.data());
		}
		
	}
	
}

