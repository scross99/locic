datatype utf8_initial_pair(ubyte_t first_value, size_t bytes_to_read);

utf8_initial_pair utf8_read_first_byte(ubyte_t first_byte) {
	size_t leading_ones_count = first_byte.count_leading_ones();
	assert leading_ones_count <= 8u;
	
	if (leading_ones_count == 0u) {
		return utf8_initial_pair(first_byte & ubyte_t.trailing_ones(7u), 0u);
	} else if (leading_ones_count == 1u) {
		throw std::utf8_decode_error(C"UTF-8 first byte has 1 leading one bit.");
	} else if (leading_ones_count == 2u) {
		return utf8_initial_pair(first_byte & ubyte_t.trailing_ones(5u), 1u);
	} else if (leading_ones_count == 3u) {
		return utf8_initial_pair(first_byte & ubyte_t.trailing_ones(4u), 2u);
	} else if (leading_ones_count == 4u) {
		return utf8_initial_pair(first_byte & ubyte_t.trailing_ones(3u), 3u);
	} else if (leading_ones_count == 5u) {
		return utf8_initial_pair(first_byte & ubyte_t.trailing_ones(2u), 4u);
	} else if (leading_ones_count == 6u) {
		return utf8_initial_pair(first_byte & ubyte_t.trailing_ones(1u), 5u);
	} else {
		throw std::utf8_decode_error(C"UTF-8 first byte has 7+ leading one bits.");
	}
}

export std.string 0.1.0 {
	
	namespace std {
		
		exception utf8_decode_error(const ubyte* error);
		
		template <typename LvalType: readable_lval<const unichar>>
		void utf8_encode(input_range<LvalType>& source, output_range<ubyte>& dest) require(movable<LvalType>) {
			while (!source.empty()) {
				utf8_encode_character(source.front(), dest);
				source.skip_front();
			}
		}
		
		template <typename LvalType: readable_lval<const ubyte>>
		void utf8_decode(input_range<LvalType>& source, output_range<unichar>& dest) require(movable<LvalType>) {
			while (!source.empty()) {
				dest.push_back(utf8_decode_character<LvalType>(source));
			}
		}
		
		void utf8_encode_character(unichar character, output_range<ubyte>& dest) {
			if (character.in_range(0x00u, 0x7Fu)) {
				// ASCII character range.
				dest.push_back(character.ascii_value());
			} else if (character.in_range(0x80u, 0x7FFu)) {
				dest.push_back(ubyte_t.leading_ones(2u) | ((uint32_t.trailing_ones(11u) & character) >> 6u).cast<ubyte>());
				dest.push_back(ubyte_t.leading_ones(1u) | ((uint32_t.trailing_ones(6u) & character) >> 0u).cast<ubyte>());
			} else if (character.in_range(0x800u, 0xFFFFu)) {
				dest.push_back(ubyte_t.leading_ones(3u) | ((uint32_t.trailing_ones(16u) & character) >> 12u).cast<ubyte>());
				dest.push_back(ubyte_t.leading_ones(1u) | ((uint32_t.trailing_ones(12u) & character) >> 6u).cast<ubyte>());
				dest.push_back(ubyte_t.leading_ones(1u) | ((uint32_t.trailing_ones(6u) & character) >> 0u).cast<ubyte>());
			} else {
				assert character.in_range(0x10000u, 0x10FFFFu);
				
				dest.push_back(ubyte_t.leading_ones(4u) | ((uint32_t.trailing_ones(21u) & character) >> 18u).cast<ubyte>());
				dest.push_back(ubyte_t.leading_ones(1u) | ((uint32_t.trailing_ones(18u) & character) >> 12u).cast<ubyte>());
				dest.push_back(ubyte_t.leading_ones(1u) | ((uint32_t.trailing_ones(12u) & character) >> 6u).cast<ubyte>());
				dest.push_back(ubyte_t.leading_ones(1u) | ((uint32_t.trailing_ones(6u) & character) >> 0u).cast<ubyte>());
			}
		}
		
		template <typename LvalType: readable_lval<const ubyte>>
		unichar utf8_decode_character(input_range<LvalType>& source) require(movable<LvalType>) {
			if (source.empty()) {
				throw utf8_decode_error(C"Failed to read first UTF-8 byte.");
			}
			
			const utf8_initial_pair first_byte_pair = utf8_read_first_byte(source.front());
			source.skip_front();
			
			assert first_byte_pair.bytes_to_read <= 5u;
			
			uint32_t character_value = first_byte_pair.first_value.cast<uint32_t>();
			
			for (size_t i: std::counter<size_t>(0u, first_byte_pair.bytes_to_read, 1u)) {
				const ubyte sequence_byte = source.front();
				source.skip_front();
				
				// UTF-8 sequence byte values must be 0b10xxxxxx
				if (sequence_byte.count_leading_ones() != 1u) {
					throw utf8_decode_error(C"UTF-8 sequence byte is not 0b10xxxxxx.");
				}
				
				character_value = (character_value << 6u) | (sequence_byte.cast<uint32_t>() & uint32_t.trailing_ones(6u));
			}
			
			if (character_value.in_range(0xD800u, 0xDFFFu)) {
				throw utf8_decode_error(C"UTF-8 code point is within invalid range U+D800 to U+DFFF.");
			}
			
			if (!character_value.in_range(0x0u, 0x10FFFFu)) {
				assert character_value > 0x10FFFFu;
				throw utf8_decode_error(C"UTF-8 code points exceeds U+10FFFF.");
			}
			
			return character_value;
		}
		
	}
	
}

