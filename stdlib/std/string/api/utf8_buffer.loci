import std.string 0.1.0 {
	
	namespace std {
		
		/**
		 * \brief UTF-8 Buffer
		 * 
		 * Represents a sequence of UTF-8 encoded unicode characters.
		 */
		class utf8_buffer {
			/**
			 * \brief Constructs an empty string buffer.
			 * 
			 * \return An empty string buffer.
			 */
			static utf8_buffer create();
			
			/**
			 * \brief Get whether the string buffer is empty.
			 * 
			 * \return Whether the string buffer is empty.
			 */
			bool empty() const noexcept;
			
			/**
			 * \brief Get string buffer contents length (number of unicode characters).
			 * 
			 * \return The string buffer contents length.
			 */
			size_t length() const noexcept;
			
			/**
			 * \brief Append a unicode character to be encoded.
			 * 
			 * \param The character to append.
			 */
			void append(unichar character);
			
			/**
			 * \brief Append a range of unicode characters to be encoded.
			 * 
			 * \param The range of characters to append.
			 */
			template <typename LvalType: readable_lval<unichar>>
			void append_range(input_range<LvalType>& range) require(movable<LvalType>);
			
			/**
			 * \brief Gets a pointer to a UTF-8 null-terminated C string.
			 * 
			 * \return A pointer to a UTF-8 null-terminated C string.
			 */
			const ubyte* c_str() const noexcept;
			
			/**
			 * \brief Generates a string value.
			 * 
			 * \return A string value containing the string buffer's contents.
			 */
			string str() const;
			
			/**
			 * \brief Gets a pointer to the UTF-8 data (which may not be null-terminated).
			 * 
			 * \return A pointer to the UTF-8 data (which may not be null-terminated).
			 */
			const ubyte* data() const noexcept;
			
			/**
			 * \brief Get the length of the UTF-8 data in bytes (NOT Unicode code points).
			 * 
			 * \return The length of the UTF-8 data in bytes
			 */
			size_t size() const noexcept;
		}
		
	}
	
}

