import int std_event_wait_create() noexcept;

import int std_event_wait_destroy(int waitHandle) noexcept;

import int std_event_wait_add_handle(int waitHandle, int newHandle, int notifyRead, int notifyWrite, int isEdgeTriggered) noexcept;

import int std_event_wait_internal(int waitHandle, int doPoll) noexcept;

export std.event 0.1.0 {

	namespace std {
	
		namespace event {
		
			class wait_set(bool isEdgeTriggered, int waitHandle) {
				static wait_set create(bool isEdgeTriggered) {
					const int waitHandle = std_event_wait_create();
					if (waitHandle < 0) {
						throw wait_create_failed(-waitHandle);
					}
					return @(isEdgeTriggered, waitHandle);
				}
				
				~ {
					unused_result std_event_wait_destroy(@waitHandle);
				}
				
				static wait_set edge_triggered() {
					return wait_set(true);
				}
				
				static wait_set level_triggered() {
					return wait_set(false);
				}
				
				void insert(source single_source) {
					const int addResult = std_event_wait_add_handle(
						@waitHandle,
						single_source._getHandle(),
						single_source._notifyRead() ? 1 : 0,
						single_source._notifyWrite() ? 1 : 0,
						@isEdgeTriggered ? 1 : 0);
					if (addResult < 0) {
						throw wait_insert_failed(-addResult);
					}
				}
				
				// TODO: add list of sources that got events.
				// TODO: add timeout.
				// TODO: use EPOLLONESHOT
				void wait() {
					const int waitResult = std_event_wait_internal(@waitHandle, 0);
					if (waitResult < 0) {
						throw wait_failed(-waitResult);
					}
				}
				
				bool poll() {
					const int waitResult = std_event_wait_internal(@waitHandle, 1);
					if (waitResult < 0) {
						throw wait_failed(-waitResult);
					}
					
					return waitResult > 0;
				}
				
				source event_source() const noexcept {
					const bool notifyRead = true;
					const bool notifyWrite = false;
					return source._handle(@waitHandle, notifyRead, notifyWrite);
				}
			}
			
		}
	}
	
}


