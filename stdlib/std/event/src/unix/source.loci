export std.event 0.1.0 {

	namespace std {
		
		namespace event {
			
			class source (int handle, bool notifyRead, bool notifyWrite) {
				static source inactive() noexcept {
					return @(-1, false, false);
				}
				
				static source _handle(int handle, bool notifyRead, bool notifyWrite) noexcept {
					return @(handle, notifyRead, notifyWrite);
				}
				
				source implicitCopy() const noexcept {
					return @(@handle, @notifyRead, @notifyWrite);
				}
				
				int _getHandle() const noexcept {
					return @handle;
				}
				
				bool _notifyRead() const noexcept {
					return @notifyRead;
				}
				
				bool _notifyWrite() const noexcept {
					return @notifyWrite;
				}
				
				bool poll() const {
					auto waitSet = wait_set.level_triggered();
					waitSet.insert(self);
					return waitSet.poll();
				}
				
				void wait() const {
					auto waitSet = wait_set.level_triggered();
					waitSet.insert(self);
					waitSet.wait();
				}
			}
			
			interface source_range {
				bool empty() const;
				
				void skip_front();
				
				lval<source> ptr_lval_t<source> front() const;
			}
			
		}
	}
	
}


