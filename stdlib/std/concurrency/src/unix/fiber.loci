export std.concurrency 0.1.0 {

	namespace std {
		
		namespace concurrency {
			
			interface runnable {
				void run();
			}
			
			template <typename T>
			require (T : runnable and is_movable<T>)
			class fiber(T runnable) {
				static create(T runnableObject) {
					// TODO!
					return @(move runnableObject);
				}
				
				void cancel() {
					// TODO!
				}
				
				void join() {
					// TODO!
				}
				
				event::source event_source() const noexcept {
					return event::source.inactive();
				}
			}
			
		}
	}
	
}


