export std.concurrency 0.1.0 {

	namespace std {
		
		template <typename T>
		concurrency::thread new_thread(T runnable_object) require(T : concurrency::runnable and movable<T>) {
			return concurrency::thread::create<T>(move runnable_object);
		}
		
		namespace concurrency {
			
			exception create_failed(int result);
			exception join_failed(int result);
			
			class thread(internal_thread_api& internal_thread) {
				template <typename T>
				static create(T runnable_object) require(T : runnable and movable<T>) {
					auto internal_thread_ptr = new_unique<internal_thread<T>>(internal_thread<T>(move runnable_object));
					internal_thread_ptr->start();
					return @(*(internal_thread_ptr.release()));
				}
				
				~ {
					assert noexcept {
						@internal_thread.cancel();
						@internal_thread.join();
					}
					@internal_thread.destroy_self();
				}
				
				void cancel() {
					@internal_thread.cancel();
				}
				
				void join() {
					@internal_thread.join();
				}
				
				event::source event_source() const noexcept {
					return @internal_thread.event_source();
				}
			}
			
		}
	}
	
}


