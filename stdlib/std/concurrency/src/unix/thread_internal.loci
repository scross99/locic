interface internal_thread_api {
	void start();
	
	void run();
	
	void destroy_self() noexcept;
	
	void cancel();
	
	void join();
	
	std::event::source event_source() const noexcept;
}

datatype thread_ref(lval<internal_thread_api&> value_lval_t<internal_thread_api&> thread);

static thread_ref thread_ref::empty() noexcept {
	return @(lval<internal_thread_api&>(value_lval_t<internal_thread_api&>.__dead()));
}

template <typename T>
require(T : std::concurrency::runnable and is_movable<T>)
class internal_thread(thread_ref self_ref,
		pthread_t thread_object,
		std::concurrency::mutex mutex,
		std::concurrency::mutex joinMutex,
		lval<T> value_lval_t<T> runnable,
		bool is_finished,
		bool has_joined,
		std::event::generator terminate_generator) {
	
	static create(T runnable) {
		return @(thread_ref.empty(), null, std::concurrency::mutex(), std::concurrency::mutex(), lval<T>(value_lval_t<T>(move runnable)), false, false, std::event::generator());
	}
	
	// Slightly dangerous; need to use unique reference once they're implemented.
	void destroy_self() noexcept {
		std::delete_raw<internal_thread<T>>(this);
	}
	
	void start() {
		@self_ref.thread = self;
		const int result = @thread_object.create(null, threadFunction, reinterpret_cast<thread_ref*, void*>(&@self_ref));
		if (result != 0) {
			throw std::concurrency::create_failed(result);
		}
	}
	
	void join() {
		// Prevent concurrent joins (make them all wait for the first join to finish).
		unused auto join_lock = std::concurrency::unique_lock(@joinMutex);
		
		if (@has_joined) {
			return;
		}
		
		const int result = @thread_object.join(null);
		if (result != 0) {
			throw std::concurrency::join_failed(result);
		}
		
		@has_joined = true;
	}
	
	void run() {
		{
			T runnable = move @runnable;
			runnable.run();
			
			unused auto lock = std::concurrency::unique_lock(@mutex);
			@is_finished = true;
		}
		@terminate_generator.notify();
	}
	
	void cancel() {
		unused auto lock = std::concurrency::unique_lock(@mutex);
		if (!@is_finished) {
			// TODO...
		}
	}
	
	std::event::source event_source() const noexcept {
		return @terminate_generator.event_source();
	}
}

void* threadFunction(void* object_pointer) {
	auto run_pointer = reinterpret_cast<void*, thread_ref*>(object_pointer);
	run_pointer->thread.run();
	return null;
}
