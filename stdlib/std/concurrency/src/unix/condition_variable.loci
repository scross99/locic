export std.concurrency 0.1.0 {

	namespace std {
		
		namespace concurrency {
			
			interface mutex_locker {
				mutex& internal_mutex();
			}
			
			exception create_condition_failed(int result);
			
			class condition_variable(pthread_cond_t condition_object) {
				static create() {
					pthread_cond_t condition_object = null;
					const int result = condition_object.init(null);
					if (result != 0) {
						throw create_condition_failed(result);
					}
					return @(move condition_object);
				}
				
				~ {
					const int result = @condition_object.destroy();
					assert result == 0;
				}
				
				void notify_one() noexcept {
					const int result = @condition_object.signal();
					assert result == 0;
				}
				
				void notify_all() noexcept {
					const int result = @condition_object.broadcast();
					assert result == 0;
				}
				
				void wait(mutex_locker& locker) {
					const int result = @condition_object.wait(locker.internal_mutex().__handle());
					assert result == 0;
				}
			}
			
		}
	}
	
}


