export std.concurrency 0.1.0 {

	namespace std {
		
		namespace concurrency {
			
			exception create_mutex_failed(int result);
			
			exception lock_failed(int result);
			
			class mutex(pthread_mutex_t mutex_object) {
				static create() {
					pthread_mutex_t mutex_object = null;
					const int result = mutex_object.init(null);
					if (result != 0) {
						throw create_mutex_failed(result);
					}
					
					return @(move mutex_object);
				}
				
				~ {
					const int result = @mutex_object.destroy();
					assert result == 0;
				}
				
				pthread_mutex_t* __handle() noexcept {
					return &@mutex_object;
				}
				
				void lock() {
					const int result = @mutex_object.lock();
					if (result != 0) {
						throw lock_failed(result);
					}
				}
				
				void unlock() noexcept {
					const int result = @mutex_object.unlock();
					assert result == 0;
				}
			}
			
			class unique_lock(mutex& mutex) {
				static unique_lock create(mutex& mutexObject) {
					mutexObject.lock();
					return @(mutexObject);
				}
				
				~ {
					@mutex.unlock();
				}
				
				mutex& internal_mutex() noexcept {
					return @mutex;
				}
			}
			
		}
	}
	
}


