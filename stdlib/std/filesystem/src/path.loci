import int access(const ubyte* pathname, int mode) noexcept;
import int std_filesystem_is_file(const ubyte* path) noexcept;
import int std_filesystem_is_directory(const ubyte* path) noexcept;

using R_OK = 4; /* Test for read permission.  */
using W_OK = 2; /* Test for write permission.  */
using X_OK = 1; /* Test for execute permission.  */
using F_OK = 0; /* Test for existence.  */

export std.filesystem 0.1.0 {
	
	namespace std {
		
		class path(bool is_absolute, size_t levels_up,
		           varray<string> components, string filename) {
			static root() {
				return @(true, 0, varray<string>(), "");
			}
			
			static working_dir() {
				// TODO!
				unreachable;
			}
			
			static parse(const string& path_string) {
				auto components = varray<string>();
				auto builder = string_builder();
				const bool is_absolute = (!path_string.empty() &&
				                          *(path_string.begin()) == '/');
				size_t levels_up = 0;
				
				for (auto c: path_string.all()) {
					if (c != '/') {
						builder.append_char(c);
						continue;
					}
					
					auto component = builder.str();
					builder = string_builder();
					if (component == "") {
						continue;
					} else if (component == ".") {
						continue;
					} else if (component == "..") {
						if (!components.empty()) {
							components.pop_back();
						} else {
							assert !is_absolute;
							levels_up++;
						}
						continue;
					}
					
					components.push_back(move component);
				}
				
				auto filename = builder.str();
				if (filename == ".") {
					filename = "";
				} else if (filename == "..") {
					if (!components.empty()) {
						components.pop_back();
					} else {
						assert !is_absolute;
						levels_up++;
					}
					filename = "";
				}
				
				assert levels_up == 0u || !is_absolute;
				return @(is_absolute, levels_up, move components,
				         move filename);
			}
			
			bool exists() const {
				return access(self.to_string().make_buffer().c_str(),
				              F_OK) == 0;
			}
			
			bool is_file() const {
				return std_filesystem_is_file(
					self.to_string().make_buffer().c_str()) != 0;
			}
			
			bool is_directory() const {
				return std_filesystem_is_directory(
					self.to_string().make_buffer().c_str()) != 0;
			}
			
			bool is_readable() const {
				return access(self.to_string().make_buffer().c_str(),
				              R_OK) == 0;
			}
			
			bool is_writable() const {
				return access(self.to_string().make_buffer().c_str(),
				              W_OK) == 0;
			}
			
			bool is_executable() const {
				return access(self.to_string().make_buffer().c_str(),
				              X_OK) == 0;
			}
			
			static implicit_cast_string(const std::string& path_string) {
				return path.parse(path_string);
			}
			
			bool is_root() const noexcept {
				return self.is_absolute() && @components.empty() &&
				       @filename.empty();
			}
			
			bool is_absolute() const noexcept {
				return @is_absolute;
			}
			
			bool is_relative() const noexcept {
				return !self.is_absolute();
			}
			
			path add(const path& other) const {
				assert !other.is_absolute();
				// TODO!
				unreachable;
			}
			
			path parent() const {
				if (!@components.empty()) {
					auto components = @components.copy();
					auto filename = components[components.size() - 1u];
					components.pop_back();
					return @(self.is_absolute(), @levels_up,
					         move components, move filename);
				} else if (!@filename.empty()) {
					return @(self.is_absolute(), @levels_up,
					         varray<string>(), "");
				} else {
					assert !self.is_absolute();
					return @(false, @levels_up + 1u, varray<string>(), "");
				}
			}
			
			path relative_path_to(unused const path& target_path,
			                      unused const path& current_dir) const {
				// TODO!
				unreachable;
			}
			
			std::string dirname() const {
				auto builder = string_builder();
				if (self.is_absolute()) {
					builder.append_char('/');
				}
				
				bool add_separator = false;
				
				for (auto i: range<size_t>(0, @levels_up)) {
					if (add_separator) {
						builder.append_char('/');
					}
					builder.append<string>("..");
					add_separator = true;
				}
				
				for (auto i: range<size_t>(0, @components.size())) {
					if (add_separator) {
						builder.append_char('/');
					}
					builder.append<string>(@components[i]);
					add_separator = true;
				}
				return builder.str();
			}
			
			std::string filename() const {
				return !@filename.empty() ? @filename : ".";
			}
			
			std::string stem() const {
				if (@filename.empty()) {
					return ".";
				}
				
				auto builder = string_builder();
				
				for (auto c: @filename.all()) {
					if (c == '.') {
						break;
					}
					
					builder.append_char(c);
				}
				
				return builder.str();
			}
			
			std::string extension() const {
				auto builder = string_builder();
				
				bool add_chars = false;
				
				for (auto c: @filename.all()) {
					if (c == '.') {
						add_chars = true;
						continue;
					}
					
					if (add_chars) {
						builder.append_char(c);
					}
				}
				
				return builder.str();
			}
			
			std::string to_string() const {
				auto dirname_prefix = self.dirname();
				if (dirname_prefix != "/" &&
				    !dirname_prefix.empty())
				{
					dirname_prefix += "/";
				}
				
				if (@filename.empty()) {
					if (dirname_prefix.empty()) {
						return ".";
					} else {
						return move dirname_prefix;
					}
				}
				
				return dirname_prefix + @filename;
			}
		}
	}
	
}

